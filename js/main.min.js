"use strict";!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e,t){var n=(t=t||te).createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function a(e){var t=!!e&&"length"in e&&e.length,n=fe.type(e);return"function"!==n&&!fe.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function r(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function i(e,t,n){return fe.isFunction(t)?fe.grep(e,function(e,a){return!!t.call(e,a,e)!==n}):t.nodeType?fe.grep(e,function(e){return e===t!==n}):"string"!=typeof t?fe.grep(e,function(e){return se.call(t,e)>-1!==n}):Ce.test(t)?fe.filter(t,e,n):(t=fe.filter(t,e),fe.grep(e,function(e){return se.call(t,e)>-1!==n&&1===e.nodeType}))}function s(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function o(e){var t={};return fe.each(e.match(ze)||[],function(e,n){t[n]=!0}),t}function l(e){return e}function u(e){throw e}function p(e,t,n,a){var r;try{e&&fe.isFunction(r=e.promise)?r.call(e).done(t).fail(n):e&&fe.isFunction(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(a))}catch(e){n.apply(void 0,[e])}}function d(){te.removeEventListener("DOMContentLoaded",d),e.removeEventListener("load",d),fe.ready()}function c(){this.expando=fe.expando+c.uid++}function f(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:He.test(e)?JSON.parse(e):e)}function h(e,t,n){var a;if(void 0===n&&1===e.nodeType)if(a="data-"+t.replace(Be,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(a))){try{n=f(n)}catch(e){}Ne.set(e,t,n)}else n=void 0;return n}function m(e,t,n,a){var r,i=1,s=20,o=a?function(){return a.cur()}:function(){return fe.css(e,t,"")},l=o(),u=n&&n[3]||(fe.cssNumber[t]?"":"px"),p=(fe.cssNumber[t]||"px"!==u&&+l)&&je.exec(fe.css(e,t));if(p&&p[3]!==u){u=u||p[3],n=n||[],p=+l||1;do{p/=i=i||".5",fe.style(e,t,p+u)}while(i!==(i=o()/l)&&1!==i&&--s)}return n&&(p=+p||+l||0,r=n[1]?p+(n[1]+1)*n[2]:+n[2],a&&(a.unit=u,a.start=p,a.end=r)),r}function g(e){var t,n=e.ownerDocument,a=e.nodeName,r=We[a];return r||(t=n.body.appendChild(n.createElement(a)),r=fe.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),We[a]=r,r)}function v(e,t){for(var n,a,r=[],i=0,s=e.length;i<s;i++)(a=e[i]).style&&(n=a.style.display,t?("none"===n&&(r[i]=Ae.get(a,"display")||null,r[i]||(a.style.display="")),""===a.style.display&&Re(a)&&(r[i]=g(a))):"none"!==n&&(r[i]="none",Ae.set(a,"display",n)));for(i=0;i<s;i++)null!=r[i]&&(e[i].style.display=r[i]);return e}function y(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&r(e,t)?fe.merge([e],n):n}function w(e,t){for(var n=0,a=e.length;n<a;n++)Ae.set(e[n],"globalEval",!t||Ae.get(t[n],"globalEval"))}function x(e,t,n,a,r){for(var i,s,o,l,u,p,d=t.createDocumentFragment(),c=[],f=0,h=e.length;f<h;f++)if((i=e[f])||0===i)if("object"===fe.type(i))fe.merge(c,i.nodeType?[i]:i);else if(Ve.test(i)){for(s=s||d.appendChild(t.createElement("div")),o=(Ge.exec(i)||["",""])[1].toLowerCase(),l=$e[o]||$e._default,s.innerHTML=l[1]+fe.htmlPrefilter(i)+l[2],p=l[0];p--;)s=s.lastChild;fe.merge(c,s.childNodes),(s=d.firstChild).textContent=""}else c.push(t.createTextNode(i));for(d.textContent="",f=0;i=c[f++];)if(a&&fe.inArray(i,a)>-1)r&&r.push(i);else if(u=fe.contains(i.ownerDocument,i),s=y(d.appendChild(i),"script"),u&&w(s),n)for(p=0;i=s[p++];)Ye.test(i.type||"")&&n.push(i);return d}function b(){return!0}function T(){return!1}function C(){try{return te.activeElement}catch(e){}}function S(e,t,n,a,r,i){var s,o;if("object"==typeof t){"string"!=typeof n&&(a=a||n,n=void 0);for(o in t)S(e,o,n,a,t[o],i);return e}if(null==a&&null==r?(r=n,a=n=void 0):null==r&&("string"==typeof n?(r=a,a=void 0):(r=a,a=n,n=void 0)),!1===r)r=T;else if(!r)return e;return 1===i&&(s=r,(r=function(e){return fe().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=fe.guid++)),e.each(function(){fe.event.add(this,t,r,a,n)})}function E(e,t){return r(e,"table")&&r(11!==t.nodeType?t:t.firstChild,"tr")?fe(">tbody",e)[0]||e:e}function M(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function k(e){var t=tt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function z(e,t){var n,a,r,i,s,o,l,u;if(1===t.nodeType){if(Ae.hasData(e)&&(i=Ae.access(e),s=Ae.set(t,i),u=i.events)){delete s.handle,s.events={};for(r in u)for(n=0,a=u[r].length;n<a;n++)fe.event.add(t,r,u[r][n])}Ne.hasData(e)&&(o=Ne.access(e),l=fe.extend({},o),Ne.set(t,l))}}function D(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Fe.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function P(e,t,a,r){t=re.apply([],t);var i,s,o,l,u,p,d=0,c=e.length,f=c-1,h=t[0],m=fe.isFunction(h);if(m||c>1&&"string"==typeof h&&!ce.checkClone&&et.test(h))return e.each(function(n){var i=e.eq(n);m&&(t[0]=h.call(this,n,i.html())),P(i,t,a,r)});if(c&&(i=x(t,e[0].ownerDocument,!1,e,r),s=i.firstChild,1===i.childNodes.length&&(i=s),s||r)){for(l=(o=fe.map(y(i,"script"),M)).length;d<c;d++)u=i,d!==f&&(u=fe.clone(u,!0,!0),l&&fe.merge(o,y(u,"script"))),a.call(e[d],u,d);if(l)for(p=o[o.length-1].ownerDocument,fe.map(o,k),d=0;d<l;d++)u=o[d],Ye.test(u.type||"")&&!Ae.access(u,"globalEval")&&fe.contains(p,u)&&(u.src?fe._evalUrl&&fe._evalUrl(u.src):n(u.textContent.replace(nt,""),p))}return e}function L(e,t,n){for(var a,r=t?fe.filter(t,e):e,i=0;null!=(a=r[i]);i++)n||1!==a.nodeType||fe.cleanData(y(a)),a.parentNode&&(n&&fe.contains(a.ownerDocument,a)&&w(y(a,"script")),a.parentNode.removeChild(a));return e}function I(e,t,n){var a,r,i,s,o=e.style;return(n=n||it(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||fe.contains(e.ownerDocument,e)||(s=fe.style(e,t)),!ce.pixelMarginRight()&&rt.test(s)&&at.test(t)&&(a=o.width,r=o.minWidth,i=o.maxWidth,o.minWidth=o.maxWidth=o.width=s,s=n.width,o.width=a,o.minWidth=r,o.maxWidth=i)),void 0!==s?s+"":s}function A(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}function N(e){if(e in dt)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=pt.length;n--;)if((e=pt[n]+t)in dt)return e}function H(e){var t=fe.cssProps[e];return t||(t=fe.cssProps[e]=N(e)||e),t}function B(e,t,n){var a=je.exec(t);return a?Math.max(0,a[2]-(n||0))+(a[3]||"px"):t}function O(e,t,n,a,r){var i,s=0;for(i=n===(a?"border":"content")?4:"width"===t?1:0;i<4;i+=2)"margin"===n&&(s+=fe.css(e,n+qe[i],!0,r)),a?("content"===n&&(s-=fe.css(e,"padding"+qe[i],!0,r)),"margin"!==n&&(s-=fe.css(e,"border"+qe[i]+"Width",!0,r))):(s+=fe.css(e,"padding"+qe[i],!0,r),"padding"!==n&&(s+=fe.css(e,"border"+qe[i]+"Width",!0,r)));return s}function j(e,t,n){var a,r=it(e),i=I(e,t,r),s="border-box"===fe.css(e,"boxSizing",!1,r);return rt.test(i)?i:(a=s&&(ce.boxSizingReliable()||i===e.style[t]),"auto"===i&&(i=e["offset"+t[0].toUpperCase()+t.slice(1)]),(i=parseFloat(i)||0)+O(e,t,n||(s?"border":"content"),a,r)+"px")}function q(e,t,n,a,r){return new q.prototype.init(e,t,n,a,r)}function R(){ft&&(!1===te.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(R):e.setTimeout(R,fe.fx.interval),fe.fx.tick())}function X(){return e.setTimeout(function(){ct=void 0}),ct=fe.now()}function W(e,t){var n,a=0,r={height:e};for(t=t?1:0;a<4;a+=2-t)r["margin"+(n=qe[a])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function F(e,t,n){for(var a,r=(Y.tweeners[t]||[]).concat(Y.tweeners["*"]),i=0,s=r.length;i<s;i++)if(a=r[i].call(n,t,e))return a}function G(e,t){var n,a,r,i,s;for(n in e)if(a=fe.camelCase(n),r=t[a],i=e[n],Array.isArray(i)&&(r=i[1],i=e[n]=i[0]),n!==a&&(e[a]=i,delete e[n]),(s=fe.cssHooks[a])&&"expand"in s){i=s.expand(i),delete e[a];for(n in i)n in e||(e[n]=i[n],t[n]=r)}else t[a]=r}function Y(e,t,n){var a,r,i=0,s=Y.prefilters.length,o=fe.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=ct||X(),n=Math.max(0,u.startTime+u.duration-t),a=1-(n/u.duration||0),i=0,s=u.tweens.length;i<s;i++)u.tweens[i].run(a);return o.notifyWith(e,[u,a,n]),a<1&&s?n:(s||o.notifyWith(e,[u,1,0]),o.resolveWith(e,[u]),!1)},u=o.promise({elem:e,props:fe.extend({},t),opts:fe.extend(!0,{specialEasing:{},easing:fe.easing._default},n),originalProperties:t,originalOptions:n,startTime:ct||X(),duration:n.duration,tweens:[],createTween:function(t,n){var a=fe.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(a),a},stop:function(t){var n=0,a=t?u.tweens.length:0;if(r)return this;for(r=!0;n<a;n++)u.tweens[n].run(1);return t?(o.notifyWith(e,[u,1,0]),o.resolveWith(e,[u,t])):o.rejectWith(e,[u,t]),this}}),p=u.props;for(G(p,u.opts.specialEasing);i<s;i++)if(a=Y.prefilters[i].call(u,e,p,u.opts))return fe.isFunction(a.stop)&&(fe._queueHooks(u.elem,u.opts.queue).stop=fe.proxy(a.stop,a)),a;return fe.map(p,F,u),fe.isFunction(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),fe.fx.timer(fe.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}function $(e){return(e.match(ze)||[]).join(" ")}function V(e){return e.getAttribute&&e.getAttribute("class")||""}function _(e,t,n,a){var r;if(Array.isArray(t))fe.each(t,function(t,r){n||Et.test(e)?a(e,r):_(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,a)});else if(n||"object"!==fe.type(t))a(e,t);else for(r in t)_(e+"["+r+"]",t[r],n,a)}function U(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var a,r=0,i=t.toLowerCase().match(ze)||[];if(fe.isFunction(n))for(;a=i[r++];)"+"===a[0]?(a=a.slice(1)||"*",(e[a]=e[a]||[]).unshift(n)):(e[a]=e[a]||[]).push(n)}}function K(e,t,n,a){function r(o){var l;return i[o]=!0,fe.each(e[o]||[],function(e,o){var u=o(t,n,a);return"string"!=typeof u||s||i[u]?s?!(l=u):void 0:(t.dataTypes.unshift(u),r(u),!1)}),l}var i={},s=e===Ot;return r(t.dataTypes[0])||!i["*"]&&r("*")}function Q(e,t){var n,a,r=fe.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:a||(a={}))[n]=t[n]);return a&&fe.extend(!0,e,a),e}function Z(e,t,n){for(var a,r,i,s,o=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===a&&(a=e.mimeType||t.getResponseHeader("Content-Type"));if(a)for(r in o)if(o[r]&&o[r].test(a)){l.unshift(r);break}if(l[0]in n)i=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){i=r;break}s||(s=r)}i=i||s}if(i)return i!==l[0]&&l.unshift(i),n[i]}function J(e,t,n,a){var r,i,s,o,l,u={},p=e.dataTypes.slice();if(p[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(i=p.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!l&&a&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=i,i=p.shift())if("*"===i)i=l;else if("*"!==l&&l!==i){if(!(s=u[l+" "+i]||u["* "+i]))for(r in u)if((o=r.split(" "))[1]===i&&(s=u[l+" "+o[0]]||u["* "+o[0]])){!0===s?s=u[r]:!0!==u[r]&&(i=o[0],p.unshift(o[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+i}}}return{state:"success",data:t}}var ee=[],te=e.document,ne=Object.getPrototypeOf,ae=ee.slice,re=ee.concat,ie=ee.push,se=ee.indexOf,oe={},le=oe.toString,ue=oe.hasOwnProperty,pe=ue.toString,de=pe.call(Object),ce={},fe=function(e,t){return new fe.fn.init(e,t)},he=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,me=/^-ms-/,ge=/-([a-z])/g,ve=function(e,t){return t.toUpperCase()};fe.fn=fe.prototype={jquery:"3.2.1",constructor:fe,length:0,toArray:function(){return ae.call(this)},get:function(e){return null==e?ae.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=fe.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return fe.each(this,e)},map:function(e){return this.pushStack(fe.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(ae.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:ie,sort:ee.sort,splice:ee.splice},fe.extend=fe.fn.extend=function(){var e,t,n,a,r,i,s=arguments[0]||{},o=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[o]||{},o++),"object"==typeof s||fe.isFunction(s)||(s={}),o===l&&(s=this,o--);o<l;o++)if(null!=(e=arguments[o]))for(t in e)n=s[t],s!==(a=e[t])&&(u&&a&&(fe.isPlainObject(a)||(r=Array.isArray(a)))?(r?(r=!1,i=n&&Array.isArray(n)?n:[]):i=n&&fe.isPlainObject(n)?n:{},s[t]=fe.extend(u,i,a)):void 0!==a&&(s[t]=a));return s},fe.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===fe.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=fe.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==le.call(e))&&(!(t=ne(e))||"function"==typeof(n=ue.call(t,"constructor")&&t.constructor)&&pe.call(n)===de)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?oe[le.call(e)]||"object":typeof e},globalEval:function(e){n(e)},camelCase:function(e){return e.replace(me,"ms-").replace(ge,ve)},each:function(e,t){var n,r=0;if(a(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(he,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(a(Object(e))?fe.merge(n,"string"==typeof e?[e]:e):ie.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:se.call(t,e,n)},merge:function(e,t){for(var n=+t.length,a=0,r=e.length;a<n;a++)e[r++]=t[a];return e.length=r,e},grep:function(e,t,n){for(var a=[],r=0,i=e.length,s=!n;r<i;r++)!t(e[r],r)!==s&&a.push(e[r]);return a},map:function(e,t,n){var r,i,s=0,o=[];if(a(e))for(r=e.length;s<r;s++)null!=(i=t(e[s],s,n))&&o.push(i);else for(s in e)null!=(i=t(e[s],s,n))&&o.push(i);return re.apply([],o)},guid:1,proxy:function(e,t){var n,a,r;if("string"==typeof t&&(n=e[t],t=e,e=n),fe.isFunction(e))return a=ae.call(arguments,2),r=function(){return e.apply(t||this,a.concat(ae.call(arguments)))},r.guid=e.guid=e.guid||fe.guid++,r},now:Date.now,support:ce}),"function"==typeof Symbol&&(fe.fn[Symbol.iterator]=ee[Symbol.iterator]),fe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){oe["[object "+t+"]"]=t.toLowerCase()});var ye=function(e){function t(e,t,n,a){var r,i,s,o,l,p,c,f=t&&t.ownerDocument,h=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return n;if(!a&&((t?t.ownerDocument||t:q)!==L&&P(t),t=t||L,A)){if(11!==h&&(l=me.exec(e)))if(r=l[1]){if(9===h){if(!(s=t.getElementById(r)))return n;if(s.id===r)return n.push(s),n}else if(f&&(s=f.getElementById(r))&&O(t,s)&&s.id===r)return n.push(s),n}else{if(l[2])return K.apply(n,t.getElementsByTagName(e)),n;if((r=l[3])&&x.getElementsByClassName&&t.getElementsByClassName)return K.apply(n,t.getElementsByClassName(r)),n}if(x.qsa&&!G[e+" "]&&(!N||!N.test(e))){if(1!==h)f=t,c=e;else if("object"!==t.nodeName.toLowerCase()){for((o=t.getAttribute("id"))?o=o.replace(we,xe):t.setAttribute("id",o=j),i=(p=S(e)).length;i--;)p[i]="#"+o+" "+d(p[i]);c=p.join(","),f=ge.test(e)&&u(t.parentNode)||t}if(c)try{return K.apply(n,f.querySelectorAll(c)),n}catch(e){}finally{o===j&&t.removeAttribute("id")}}}return M(e.replace(ie,"$1"),t,n,a)}function n(){function e(n,a){return t.push(n+" ")>b.cacheLength&&delete e[t.shift()],e[n+" "]=a}var t=[];return e}function a(e){return e[j]=!0,e}function r(e){var t=L.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function i(e,t){for(var n=e.split("|"),a=n.length;a--;)b.attrHandle[n[a]]=t}function s(e,t){var n=t&&e,a=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(a)return a;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function o(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&Te(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function l(e){return a(function(t){return t=+t,a(function(n,a){for(var r,i=e([],n.length,t),s=i.length;s--;)n[r=i[s]]&&(n[r]=!(a[r]=n[r]))})})}function u(e){return e&&void 0!==e.getElementsByTagName&&e}function p(){}function d(e){for(var t=0,n=e.length,a="";t<n;t++)a+=e[t].value;return a}function c(e,t,n){var a=t.dir,r=t.next,i=r||a,s=n&&"parentNode"===i,o=X++;return t.first?function(t,n,r){for(;t=t[a];)if(1===t.nodeType||s)return e(t,n,r);return!1}:function(t,n,l){var u,p,d,c=[R,o];if(l){for(;t=t[a];)if((1===t.nodeType||s)&&e(t,n,l))return!0}else for(;t=t[a];)if(1===t.nodeType||s)if(d=t[j]||(t[j]={}),p=d[t.uniqueID]||(d[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[a]||t;else{if((u=p[i])&&u[0]===R&&u[1]===o)return c[2]=u[2];if(p[i]=c,c[2]=e(t,n,l))return!0}return!1}}function f(e){return e.length>1?function(t,n,a){for(var r=e.length;r--;)if(!e[r](t,n,a))return!1;return!0}:e[0]}function h(e,n,a){for(var r=0,i=n.length;r<i;r++)t(e,n[r],a);return a}function m(e,t,n,a,r){for(var i,s=[],o=0,l=e.length,u=null!=t;o<l;o++)(i=e[o])&&(n&&!n(i,a,r)||(s.push(i),u&&t.push(o)));return s}function g(e,t,n,r,i,s){return r&&!r[j]&&(r=g(r)),i&&!i[j]&&(i=g(i,s)),a(function(a,s,o,l){var u,p,d,c=[],f=[],g=s.length,v=a||h(t||"*",o.nodeType?[o]:o,[]),y=!e||!a&&t?v:m(v,c,e,o,l),w=n?i||(a?e:g||r)?[]:s:y;if(n&&n(y,w,o,l),r)for(u=m(w,f),r(u,[],o,l),p=u.length;p--;)(d=u[p])&&(w[f[p]]=!(y[f[p]]=d));if(a){if(i||e){if(i){for(u=[],p=w.length;p--;)(d=w[p])&&u.push(y[p]=d);i(null,w=[],u,l)}for(p=w.length;p--;)(d=w[p])&&(u=i?Z(a,d):c[p])>-1&&(a[u]=!(s[u]=d))}}else w=m(w===s?w.splice(g,w.length):w),i?i(null,s,w,l):K.apply(s,w)})}function v(e){for(var t,n,a,r=e.length,i=b.relative[e[0].type],s=i||b.relative[" "],o=i?1:0,l=c(function(e){return e===t},s,!0),u=c(function(e){return Z(t,e)>-1},s,!0),p=[function(e,n,a){var r=!i&&(a||n!==k)||((t=n).nodeType?l(e,n,a):u(e,n,a));return t=null,r}];o<r;o++)if(n=b.relative[e[o].type])p=[c(f(p),n)];else{if((n=b.filter[e[o].type].apply(null,e[o].matches))[j]){for(a=++o;a<r&&!b.relative[e[a].type];a++);return g(o>1&&f(p),o>1&&d(e.slice(0,o-1).concat({value:" "===e[o-2].type?"*":""})).replace(ie,"$1"),n,o<a&&v(e.slice(o,a)),a<r&&v(e=e.slice(a)),a<r&&d(e))}p.push(n)}return f(p)}function y(e,n){var r=n.length>0,i=e.length>0,s=function(a,s,o,l,u){var p,d,c,f=0,h="0",g=a&&[],v=[],y=k,w=a||i&&b.find.TAG("*",u),x=R+=null==y?1:Math.random()||.1,T=w.length;for(u&&(k=s===L||s||u);h!==T&&null!=(p=w[h]);h++){if(i&&p){for(d=0,s||p.ownerDocument===L||(P(p),o=!A);c=e[d++];)if(c(p,s||L,o)){l.push(p);break}u&&(R=x)}r&&((p=!c&&p)&&f--,a&&g.push(p))}if(f+=h,r&&h!==f){for(d=0;c=n[d++];)c(g,v,s,o);if(a){if(f>0)for(;h--;)g[h]||v[h]||(v[h]=_.call(l));v=m(v)}K.apply(l,v),u&&!a&&v.length>0&&f+n.length>1&&t.uniqueSort(l)}return u&&(R=x,k=y),g};return r?a(s):s}var w,x,b,T,C,S,E,M,k,z,D,P,L,I,A,N,H,B,O,j="sizzle"+1*new Date,q=e.document,R=0,X=0,W=n(),F=n(),G=n(),Y=function(e,t){return e===t&&(D=!0),0},$={}.hasOwnProperty,V=[],_=V.pop,U=V.push,K=V.push,Q=V.slice,Z=function(e,t){for(var n=0,a=e.length;n<a;n++)if(e[n]===t)return n;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ne="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",ae=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ne+")*)|.*)\\)|)",re=new RegExp(ee+"+","g"),ie=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),se=new RegExp("^"+ee+"*,"+ee+"*"),oe=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),le=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),ue=new RegExp(ae),pe=new RegExp("^"+te+"$"),de={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ne),PSEUDO:new RegExp("^"+ae),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},ce=/^(?:input|select|textarea|button)$/i,fe=/^h\d$/i,he=/^[^{]+\{\s*\[native \w/,me=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ge=/[+~]/,ve=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),ye=function(e,t,n){var a="0x"+t-65536;return a!==a||n?t:a<0?String.fromCharCode(a+65536):String.fromCharCode(a>>10|55296,1023&a|56320)},we=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,xe=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},be=function(){P()},Te=c(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{K.apply(V=Q.call(q.childNodes),q.childNodes),V[q.childNodes.length].nodeType}catch(e){K={apply:V.length?function(e,t){U.apply(e,Q.call(t))}:function(e,t){for(var n=e.length,a=0;e[n++]=t[a++];);e.length=n-1}}}x=t.support={},C=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},P=t.setDocument=function(e){var t,n,a=e?e.ownerDocument||e:q;return a!==L&&9===a.nodeType&&a.documentElement?(L=a,I=L.documentElement,A=!C(L),q!==L&&(n=L.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",be,!1):n.attachEvent&&n.attachEvent("onunload",be)),x.attributes=r(function(e){return e.className="i",!e.getAttribute("className")}),x.getElementsByTagName=r(function(e){return e.appendChild(L.createComment("")),!e.getElementsByTagName("*").length}),x.getElementsByClassName=he.test(L.getElementsByClassName),x.getById=r(function(e){return I.appendChild(e).id=j,!L.getElementsByName||!L.getElementsByName(j).length}),x.getById?(b.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){return e.getAttribute("id")===t}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&A){var n=t.getElementById(e);return n?[n]:[]}}):(b.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&A){var n,a,r,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(r=t.getElementsByName(e),a=0;i=r[a++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),b.find.TAG=x.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):x.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,a=[],r=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[r++];)1===n.nodeType&&a.push(n);return a}return i},b.find.CLASS=x.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&A)return t.getElementsByClassName(e)},H=[],N=[],(x.qsa=he.test(L.querySelectorAll))&&(r(function(e){I.appendChild(e).innerHTML="<a id='"+j+"'></a><select id='"+j+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&N.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||N.push("\\["+ee+"*(?:value|"+J+")"),e.querySelectorAll("[id~="+j+"-]").length||N.push("~="),e.querySelectorAll(":checked").length||N.push(":checked"),e.querySelectorAll("a#"+j+"+*").length||N.push(".#.+[+~]")}),r(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=L.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&N.push("name"+ee+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&N.push(":enabled",":disabled"),I.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&N.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),N.push(",.*:")})),(x.matchesSelector=he.test(B=I.matches||I.webkitMatchesSelector||I.mozMatchesSelector||I.oMatchesSelector||I.msMatchesSelector))&&r(function(e){x.disconnectedMatch=B.call(e,"*"),B.call(e,"[s!='']:x"),H.push("!=",ae)}),N=N.length&&new RegExp(N.join("|")),H=H.length&&new RegExp(H.join("|")),t=he.test(I.compareDocumentPosition),O=t||he.test(I.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,a=t&&t.parentNode;return e===a||!(!a||1!==a.nodeType||!(n.contains?n.contains(a):e.compareDocumentPosition&&16&e.compareDocumentPosition(a)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},Y=t?function(e,t){if(e===t)return D=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!x.sortDetached&&t.compareDocumentPosition(e)===n?e===L||e.ownerDocument===q&&O(q,e)?-1:t===L||t.ownerDocument===q&&O(q,t)?1:z?Z(z,e)-Z(z,t):0:4&n?-1:1)}:function(e,t){if(e===t)return D=!0,0;var n,a=0,r=e.parentNode,i=t.parentNode,o=[e],l=[t];if(!r||!i)return e===L?-1:t===L?1:r?-1:i?1:z?Z(z,e)-Z(z,t):0;if(r===i)return s(e,t);for(n=e;n=n.parentNode;)o.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;o[a]===l[a];)a++;return a?s(o[a],l[a]):o[a]===q?-1:l[a]===q?1:0},L):L},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==L&&P(e),n=n.replace(le,"='$1']"),x.matchesSelector&&A&&!G[n+" "]&&(!H||!H.test(n))&&(!N||!N.test(n)))try{var a=B.call(e,n);if(a||x.disconnectedMatch||e.document&&11!==e.document.nodeType)return a}catch(e){}return t(n,L,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==L&&P(e),O(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==L&&P(e);var n=b.attrHandle[t.toLowerCase()],a=n&&$.call(b.attrHandle,t.toLowerCase())?n(e,t,!A):void 0;return void 0!==a?a:x.attributes||!A?e.getAttribute(t):(a=e.getAttributeNode(t))&&a.specified?a.value:null},t.escape=function(e){return(e+"").replace(we,xe)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],a=0,r=0;if(D=!x.detectDuplicates,z=!x.sortStable&&e.slice(0),e.sort(Y),D){for(;t=e[r++];)t===e[r]&&(a=n.push(r));for(;a--;)e.splice(n[a],1)}return z=null,e},T=t.getText=function(e){var t,n="",a=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=T(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[a++];)n+=T(t);return n},(b=t.selectors={cacheLength:50,createPseudo:a,match:de,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ve,ye),e[3]=(e[3]||e[4]||e[5]||"").replace(ve,ye),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return de.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&ue.test(n)&&(t=S(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ve,ye).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=W[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&W(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,a){return function(r){var i=t.attr(r,e);return null==i?"!="===n:!n||(i+="","="===n?i===a:"!="===n?i!==a:"^="===n?a&&0===i.indexOf(a):"*="===n?a&&i.indexOf(a)>-1:"$="===n?a&&i.slice(-a.length)===a:"~="===n?(" "+i.replace(re," ")+" ").indexOf(a)>-1:"|="===n&&(i===a||i.slice(0,a.length+1)===a+"-"))}},CHILD:function(e,t,n,a,r){var i="nth"!==e.slice(0,3),s="last"!==e.slice(-4),o="of-type"===t;return 1===a&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var u,p,d,c,f,h,m=i!==s?"nextSibling":"previousSibling",g=t.parentNode,v=o&&t.nodeName.toLowerCase(),y=!l&&!o,w=!1;if(g){if(i){for(;m;){for(c=t;c=c[m];)if(o?c.nodeName.toLowerCase()===v:1===c.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?g.firstChild:g.lastChild],s&&y){for(w=(f=(u=(p=(d=(c=g)[j]||(c[j]={}))[c.uniqueID]||(d[c.uniqueID]={}))[e]||[])[0]===R&&u[1])&&u[2],c=f&&g.childNodes[f];c=++f&&c&&c[m]||(w=f=0)||h.pop();)if(1===c.nodeType&&++w&&c===t){p[e]=[R,f,w];break}}else if(y&&(w=f=(u=(p=(d=(c=t)[j]||(c[j]={}))[c.uniqueID]||(d[c.uniqueID]={}))[e]||[])[0]===R&&u[1]),!1===w)for(;(c=++f&&c&&c[m]||(w=f=0)||h.pop())&&((o?c.nodeName.toLowerCase()!==v:1!==c.nodeType)||!++w||(y&&((p=(d=c[j]||(c[j]={}))[c.uniqueID]||(d[c.uniqueID]={}))[e]=[R,w]),c!==t)););return(w-=r)===a||w%a==0&&w/a>=0}}},PSEUDO:function(e,n){var r,i=b.pseudos[e]||b.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return i[j]?i(n):i.length>1?(r=[e,e,"",n],b.setFilters.hasOwnProperty(e.toLowerCase())?a(function(e,t){for(var a,r=i(e,n),s=r.length;s--;)e[a=Z(e,r[s])]=!(t[a]=r[s])}):function(e){return i(e,0,r)}):i}},pseudos:{not:a(function(e){var t=[],n=[],r=E(e.replace(ie,"$1"));return r[j]?a(function(e,t,n,a){for(var i,s=r(e,null,a,[]),o=e.length;o--;)(i=s[o])&&(e[o]=!(t[o]=i))}):function(e,a,i){return t[0]=e,r(t,null,i,n),t[0]=null,!n.pop()}}),has:a(function(e){return function(n){return t(e,n).length>0}}),contains:a(function(e){return e=e.replace(ve,ye),function(t){return(t.textContent||t.innerText||T(t)).indexOf(e)>-1}}),lang:a(function(e){return pe.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ve,ye).toLowerCase(),function(t){var n;do{if(n=A?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===I},focus:function(e){return e===L.activeElement&&(!L.hasFocus||L.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:o(!1),disabled:o(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return fe.test(e.nodeName)},input:function(e){return ce.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[n<0?n+t:n]}),even:l(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:l(function(e,t,n){for(var a=n<0?n+t:n;--a>=0;)e.push(a);return e}),gt:l(function(e,t,n){for(var a=n<0?n+t:n;++a<t;)e.push(a);return e})}}).pseudos.nth=b.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[w]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(w);for(w in{submit:!0,reset:!0})b.pseudos[w]=function(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}(w);return p.prototype=b.filters=b.pseudos,b.setFilters=new p,S=t.tokenize=function(e,n){var a,r,i,s,o,l,u,p=F[e+" "];if(p)return n?0:p.slice(0);for(o=e,l=[],u=b.preFilter;o;){a&&!(r=se.exec(o))||(r&&(o=o.slice(r[0].length)||o),l.push(i=[])),a=!1,(r=oe.exec(o))&&(a=r.shift(),i.push({value:a,type:r[0].replace(ie," ")}),o=o.slice(a.length));for(s in b.filter)!(r=de[s].exec(o))||u[s]&&!(r=u[s](r))||(a=r.shift(),i.push({value:a,type:s,matches:r}),o=o.slice(a.length));if(!a)break}return n?o.length:o?t.error(e):F(e,l).slice(0)},E=t.compile=function(e,t){var n,a=[],r=[],i=G[e+" "];if(!i){for(t||(t=S(e)),n=t.length;n--;)(i=v(t[n]))[j]?a.push(i):r.push(i);(i=G(e,y(r,a))).selector=e}return i},M=t.select=function(e,t,n,a){var r,i,s,o,l,p="function"==typeof e&&e,c=!a&&S(e=p.selector||e);if(n=n||[],1===c.length){if((i=c[0]=c[0].slice(0)).length>2&&"ID"===(s=i[0]).type&&9===t.nodeType&&A&&b.relative[i[1].type]){if(!(t=(b.find.ID(s.matches[0].replace(ve,ye),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(i.shift().value.length)}for(r=de.needsContext.test(e)?0:i.length;r--&&(s=i[r],!b.relative[o=s.type]);)if((l=b.find[o])&&(a=l(s.matches[0].replace(ve,ye),ge.test(i[0].type)&&u(t.parentNode)||t))){if(i.splice(r,1),!(e=a.length&&d(i)))return K.apply(n,a),n;break}}return(p||E(e,c))(a,t,!A,n,!t||ge.test(e)&&u(t.parentNode)||t),n},x.sortStable=j.split("").sort(Y).join("")===j,x.detectDuplicates=!!D,P(),x.sortDetached=r(function(e){return 1&e.compareDocumentPosition(L.createElement("fieldset"))}),r(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||i("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),x.attributes&&r(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||i("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),r(function(e){return null==e.getAttribute("disabled")})||i(J,function(e,t,n){var a;if(!n)return!0===e[t]?t.toLowerCase():(a=e.getAttributeNode(t))&&a.specified?a.value:null}),t}(e);fe.find=ye,fe.expr=ye.selectors,fe.expr[":"]=fe.expr.pseudos,fe.uniqueSort=fe.unique=ye.uniqueSort,fe.text=ye.getText,fe.isXMLDoc=ye.isXML,fe.contains=ye.contains,fe.escapeSelector=ye.escape;var we=function(e,t,n){for(var a=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&fe(e).is(n))break;a.push(e)}return a},xe=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},be=fe.expr.match.needsContext,Te=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Ce=/^.[^:#\[\.,]*$/;fe.filter=function(e,t,n){var a=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===a.nodeType?fe.find.matchesSelector(a,e)?[a]:[]:fe.find.matches(e,fe.grep(t,function(e){return 1===e.nodeType}))},fe.fn.extend({find:function(e){var t,n,a=this.length,r=this;if("string"!=typeof e)return this.pushStack(fe(e).filter(function(){for(t=0;t<a;t++)if(fe.contains(r[t],this))return!0}));for(n=this.pushStack([]),t=0;t<a;t++)fe.find(e,r[t],n);return a>1?fe.uniqueSort(n):n},filter:function(e){return this.pushStack(i(this,e||[],!1))},not:function(e){return this.pushStack(i(this,e||[],!0))},is:function(e){return!!i(this,"string"==typeof e&&be.test(e)?fe(e):e||[],!1).length}});var Se,Ee=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(fe.fn.init=function(e,t,n){var a,r;if(!e)return this;if(n=n||Se,"string"==typeof e){if(!(a="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Ee.exec(e))||!a[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(a[1]){if(t=t instanceof fe?t[0]:t,fe.merge(this,fe.parseHTML(a[1],t&&t.nodeType?t.ownerDocument||t:te,!0)),Te.test(a[1])&&fe.isPlainObject(t))for(a in t)fe.isFunction(this[a])?this[a](t[a]):this.attr(a,t[a]);return this}return(r=te.getElementById(a[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):fe.isFunction(e)?void 0!==n.ready?n.ready(e):e(fe):fe.makeArray(e,this)}).prototype=fe.fn,Se=fe(te);var Me=/^(?:parents|prev(?:Until|All))/,ke={children:!0,contents:!0,next:!0,prev:!0};fe.fn.extend({has:function(e){var t=fe(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(fe.contains(this,t[e]))return!0})},closest:function(e,t){var n,a=0,r=this.length,i=[],s="string"!=typeof e&&fe(e);if(!be.test(e))for(;a<r;a++)for(n=this[a];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&fe.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?fe.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?se.call(fe(e),this[0]):se.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(fe.uniqueSort(fe.merge(this.get(),fe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),fe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return we(e,"parentNode")},parentsUntil:function(e,t,n){return we(e,"parentNode",n)},next:function(e){return s(e,"nextSibling")},prev:function(e){return s(e,"previousSibling")},nextAll:function(e){return we(e,"nextSibling")},prevAll:function(e){return we(e,"previousSibling")},nextUntil:function(e,t,n){return we(e,"nextSibling",n)},prevUntil:function(e,t,n){return we(e,"previousSibling",n)},siblings:function(e){return xe((e.parentNode||{}).firstChild,e)},children:function(e){return xe(e.firstChild)},contents:function(e){return r(e,"iframe")?e.contentDocument:(r(e,"template")&&(e=e.content||e),fe.merge([],e.childNodes))}},function(e,t){fe.fn[e]=function(n,a){var r=fe.map(this,t,n);return"Until"!==e.slice(-5)&&(a=n),a&&"string"==typeof a&&(r=fe.filter(a,r)),this.length>1&&(ke[e]||fe.uniqueSort(r),Me.test(e)&&r.reverse()),this.pushStack(r)}});var ze=/[^\x20\t\r\n\f]+/g;fe.Callbacks=function(e){e="string"==typeof e?o(e):fe.extend({},e);var t,n,a,r,i=[],s=[],l=-1,u=function(){for(r=r||e.once,a=t=!0;s.length;l=-1)for(n=s.shift();++l<i.length;)!1===i[l].apply(n[0],n[1])&&e.stopOnFalse&&(l=i.length,n=!1);e.memory||(n=!1),t=!1,r&&(i=n?[]:"")},p={add:function(){return i&&(n&&!t&&(l=i.length-1,s.push(n)),function t(n){fe.each(n,function(n,a){fe.isFunction(a)?e.unique&&p.has(a)||i.push(a):a&&a.length&&"string"!==fe.type(a)&&t(a)})}(arguments),n&&!t&&u()),this},remove:function(){return fe.each(arguments,function(e,t){for(var n;(n=fe.inArray(t,i,n))>-1;)i.splice(n,1),n<=l&&l--}),this},has:function(e){return e?fe.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return r=s=[],i=n="",this},disabled:function(){return!i},lock:function(){return r=s=[],n||t||(i=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||u()),this},fire:function(){return p.fireWith(this,arguments),this},fired:function(){return!!a}};return p},fe.extend({Deferred:function(t){var n=[["notify","progress",fe.Callbacks("memory"),fe.Callbacks("memory"),2],["resolve","done",fe.Callbacks("once memory"),fe.Callbacks("once memory"),0,"resolved"],["reject","fail",fe.Callbacks("once memory"),fe.Callbacks("once memory"),1,"rejected"]],a="pending",r={state:function(){return a},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return fe.Deferred(function(t){fe.each(n,function(n,a){var r=fe.isFunction(e[a[4]])&&e[a[4]];i[a[1]](function(){var e=r&&r.apply(this,arguments);e&&fe.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[a[0]+"With"](this,r?[e]:arguments)})}),e=null}).promise()},then:function(t,a,r){function i(t,n,a,r){return function(){var o=this,p=arguments,d=function(){var e,d;if(!(t<s)){if((e=a.apply(o,p))===n.promise())throw new TypeError("Thenable self-resolution");d=e&&("object"==typeof e||"function"==typeof e)&&e.then,fe.isFunction(d)?r?d.call(e,i(s,n,l,r),i(s,n,u,r)):(s++,d.call(e,i(s,n,l,r),i(s,n,u,r),i(s,n,l,n.notifyWith))):(a!==l&&(o=void 0,p=[e]),(r||n.resolveWith)(o,p))}},c=r?d:function(){try{d()}catch(e){fe.Deferred.exceptionHook&&fe.Deferred.exceptionHook(e,c.stackTrace),t+1>=s&&(a!==u&&(o=void 0,p=[e]),n.rejectWith(o,p))}};t?c():(fe.Deferred.getStackHook&&(c.stackTrace=fe.Deferred.getStackHook()),e.setTimeout(c))}}var s=0;return fe.Deferred(function(e){n[0][3].add(i(0,e,fe.isFunction(r)?r:l,e.notifyWith)),n[1][3].add(i(0,e,fe.isFunction(t)?t:l)),n[2][3].add(i(0,e,fe.isFunction(a)?a:u))}).promise()},promise:function(e){return null!=e?fe.extend(e,r):r}},i={};return fe.each(n,function(e,t){var s=t[2],o=t[5];r[t[1]]=s.add,o&&s.add(function(){a=o},n[3-e][2].disable,n[0][2].lock),s.add(t[3].fire),i[t[0]]=function(){return i[t[0]+"With"](this===i?void 0:this,arguments),this},i[t[0]+"With"]=s.fireWith}),r.promise(i),t&&t.call(i,i),i},when:function(e){var t=arguments.length,n=t,a=Array(n),r=ae.call(arguments),i=fe.Deferred(),s=function(e){return function(n){a[e]=this,r[e]=arguments.length>1?ae.call(arguments):n,--t||i.resolveWith(a,r)}};if(t<=1&&(p(e,i.done(s(n)).resolve,i.reject,!t),"pending"===i.state()||fe.isFunction(r[n]&&r[n].then)))return i.then();for(;n--;)p(r[n],s(n),i.reject);return i.promise()}});var De=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;fe.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&De.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},fe.readyException=function(t){e.setTimeout(function(){throw t})};var Pe=fe.Deferred();fe.fn.ready=function(e){return Pe.then(e).catch(function(e){fe.readyException(e)}),this},fe.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--fe.readyWait:fe.isReady)||(fe.isReady=!0,!0!==e&&--fe.readyWait>0||Pe.resolveWith(te,[fe]))}}),fe.ready.then=Pe.then,"complete"===te.readyState||"loading"!==te.readyState&&!te.documentElement.doScroll?e.setTimeout(fe.ready):(te.addEventListener("DOMContentLoaded",d),e.addEventListener("load",d));var Le=function(e,t,n,a,r,i,s){var o=0,l=e.length,u=null==n;if("object"===fe.type(n)){r=!0;for(o in n)Le(e,t,o,n[o],!0,i,s)}else if(void 0!==a&&(r=!0,fe.isFunction(a)||(s=!0),u&&(s?(t.call(e,a),t=null):(u=t,t=function(e,t,n){return u.call(fe(e),n)})),t))for(;o<l;o++)t(e[o],n,s?a:a.call(e[o],o,t(e[o],n)));return r?e:u?t.call(e):l?t(e[0],n):i},Ie=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};c.uid=1,c.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Ie(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var a,r=this.cache(e);if("string"==typeof t)r[fe.camelCase(t)]=n;else for(a in t)r[fe.camelCase(a)]=t[a];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][fe.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,a=e[this.expando];if(void 0!==a){if(void 0!==t){n=(t=Array.isArray(t)?t.map(fe.camelCase):(t=fe.camelCase(t))in a?[t]:t.match(ze)||[]).length;for(;n--;)delete a[t[n]]}(void 0===t||fe.isEmptyObject(a))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!fe.isEmptyObject(t)}};var Ae=new c,Ne=new c,He=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Be=/[A-Z]/g;fe.extend({hasData:function(e){return Ne.hasData(e)||Ae.hasData(e)},data:function(e,t,n){return Ne.access(e,t,n)},removeData:function(e,t){Ne.remove(e,t)},_data:function(e,t,n){return Ae.access(e,t,n)},_removeData:function(e,t){Ae.remove(e,t)}}),fe.fn.extend({data:function(e,t){var n,a,r,i=this[0],s=i&&i.attributes;if(void 0===e){if(this.length&&(r=Ne.get(i),1===i.nodeType&&!Ae.get(i,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(a=s[n].name).indexOf("data-")&&(a=fe.camelCase(a.slice(5)),h(i,a,r[a]));Ae.set(i,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each(function(){Ne.set(this,e)}):Le(this,function(t){var n;if(i&&void 0===t){if(void 0!==(n=Ne.get(i,e)))return n;if(void 0!==(n=h(i,e)))return n}else this.each(function(){Ne.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Ne.remove(this,e)})}}),fe.extend({queue:function(e,t,n){var a;if(e)return t=(t||"fx")+"queue",a=Ae.get(e,t),n&&(!a||Array.isArray(n)?a=Ae.access(e,t,fe.makeArray(n)):a.push(n)),a||[]},dequeue:function(e,t){t=t||"fx";var n=fe.queue(e,t),a=n.length,r=n.shift(),i=fe._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),a--),r&&("fx"===t&&n.unshift("inprogress"),delete i.stop,r.call(e,function(){fe.dequeue(e,t)},i)),!a&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Ae.get(e,n)||Ae.access(e,n,{empty:fe.Callbacks("once memory").add(function(){Ae.remove(e,[t+"queue",n])})})}}),fe.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?fe.queue(this[0],e):void 0===t?this:this.each(function(){var n=fe.queue(this,e,t);fe._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&fe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){fe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,a=1,r=fe.Deferred(),i=this,s=this.length,o=function(){--a||r.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=Ae.get(i[s],e+"queueHooks"))&&n.empty&&(a++,n.empty.add(o));return o(),r.promise(t)}});var Oe=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,je=new RegExp("^(?:([+-])=|)("+Oe+")([a-z%]*)$","i"),qe=["Top","Right","Bottom","Left"],Re=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&fe.contains(e.ownerDocument,e)&&"none"===fe.css(e,"display")},Xe=function(e,t,n,a){var r,i,s={};for(i in t)s[i]=e.style[i],e.style[i]=t[i];r=n.apply(e,a||[]);for(i in t)e.style[i]=s[i];return r},We={};fe.fn.extend({show:function(){return v(this,!0)},hide:function(){return v(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Re(this)?fe(this).show():fe(this).hide()})}});var Fe=/^(?:checkbox|radio)$/i,Ge=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Ye=/^$|\/(?:java|ecma)script/i,$e={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};$e.optgroup=$e.option,$e.tbody=$e.tfoot=$e.colgroup=$e.caption=$e.thead,$e.th=$e.td;var Ve=/<|&#?\w+;/;!function(){var e=te.createDocumentFragment().appendChild(te.createElement("div")),t=te.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),ce.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",ce.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var _e=te.documentElement,Ue=/^key/,Ke=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Qe=/^([^.]*)(?:\.(.+)|)/;fe.event={global:{},add:function(e,t,n,a,r){var i,s,o,l,u,p,d,c,f,h,m,g=Ae.get(e);if(g)for(n.handler&&(n=(i=n).handler,r=i.selector),r&&fe.find.matchesSelector(_e,r),n.guid||(n.guid=fe.guid++),(l=g.events)||(l=g.events={}),(s=g.handle)||(s=g.handle=function(t){return void 0!==fe&&fe.event.triggered!==t.type?fe.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(ze)||[""]).length;u--;)f=m=(o=Qe.exec(t[u])||[])[1],h=(o[2]||"").split(".").sort(),f&&(d=fe.event.special[f]||{},f=(r?d.delegateType:d.bindType)||f,d=fe.event.special[f]||{},p=fe.extend({type:f,origType:m,data:a,handler:n,guid:n.guid,selector:r,needsContext:r&&fe.expr.match.needsContext.test(r),namespace:h.join(".")},i),(c=l[f])||((c=l[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,a,h,s)||e.addEventListener&&e.addEventListener(f,s)),d.add&&(d.add.call(e,p),p.handler.guid||(p.handler.guid=n.guid)),r?c.splice(c.delegateCount++,0,p):c.push(p),fe.event.global[f]=!0)},remove:function(e,t,n,a,r){var i,s,o,l,u,p,d,c,f,h,m,g=Ae.hasData(e)&&Ae.get(e);if(g&&(l=g.events)){for(u=(t=(t||"").match(ze)||[""]).length;u--;)if(o=Qe.exec(t[u])||[],f=m=o[1],h=(o[2]||"").split(".").sort(),f){for(d=fe.event.special[f]||{},c=l[f=(a?d.delegateType:d.bindType)||f]||[],o=o[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=i=c.length;i--;)p=c[i],!r&&m!==p.origType||n&&n.guid!==p.guid||o&&!o.test(p.namespace)||a&&a!==p.selector&&("**"!==a||!p.selector)||(c.splice(i,1),p.selector&&c.delegateCount--,d.remove&&d.remove.call(e,p));s&&!c.length&&(d.teardown&&!1!==d.teardown.call(e,h,g.handle)||fe.removeEvent(e,f,g.handle),delete l[f])}else for(f in l)fe.event.remove(e,f+t[u],n,a,!0);fe.isEmptyObject(l)&&Ae.remove(e,"handle events")}},dispatch:function(e){var t,n,a,r,i,s,o=fe.event.fix(e),l=new Array(arguments.length),u=(Ae.get(this,"events")||{})[o.type]||[],p=fe.event.special[o.type]||{};for(l[0]=o,t=1;t<arguments.length;t++)l[t]=arguments[t];if(o.delegateTarget=this,!p.preDispatch||!1!==p.preDispatch.call(this,o)){for(s=fe.event.handlers.call(this,o,u),t=0;(r=s[t++])&&!o.isPropagationStopped();)for(o.currentTarget=r.elem,n=0;(i=r.handlers[n++])&&!o.isImmediatePropagationStopped();)o.rnamespace&&!o.rnamespace.test(i.namespace)||(o.handleObj=i,o.data=i.data,void 0!==(a=((fe.event.special[i.origType]||{}).handle||i.handler).apply(r.elem,l))&&!1===(o.result=a)&&(o.preventDefault(),o.stopPropagation()));return p.postDispatch&&p.postDispatch.call(this,o),o.result}},handlers:function(e,t){var n,a,r,i,s,o=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(i=[],s={},n=0;n<l;n++)void 0===s[r=(a=t[n]).selector+" "]&&(s[r]=a.needsContext?fe(r,this).index(u)>-1:fe.find(r,this,null,[u]).length),s[r]&&i.push(a);i.length&&o.push({elem:u,handlers:i})}return u=this,l<t.length&&o.push({elem:u,handlers:t.slice(l)}),o},addProp:function(e,t){Object.defineProperty(fe.Event.prototype,e,{enumerable:!0,configurable:!0,get:fe.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[fe.expando]?e:new fe.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==C()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===C()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&r(this,"input"))return this.click(),!1},_default:function(e){return r(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},fe.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},fe.Event=function(e,t){if(!(this instanceof fe.Event))return new fe.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?b:T,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&fe.extend(this,t),this.timeStamp=e&&e.timeStamp||fe.now(),this[fe.expando]=!0},fe.Event.prototype={constructor:fe.Event,isDefaultPrevented:T,isPropagationStopped:T,isImmediatePropagationStopped:T,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=b,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=b,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=b,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},fe.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ue.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ke.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},fe.event.addProp),fe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){fe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,a=this,r=e.relatedTarget,i=e.handleObj;return r&&(r===a||fe.contains(a,r))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}}),fe.fn.extend({on:function(e,t,n,a){return S(this,e,t,n,a)},one:function(e,t,n,a){return S(this,e,t,n,a,1)},off:function(e,t,n){var a,r;if(e&&e.preventDefault&&e.handleObj)return a=e.handleObj,fe(e.delegateTarget).off(a.namespace?a.origType+"."+a.namespace:a.origType,a.selector,a.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=T),this.each(function(){fe.event.remove(this,e,n,t)})}});var Ze=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Je=/<script|<style|<link/i,et=/checked\s*(?:[^=]|=\s*.checked.)/i,tt=/^true\/(.*)/,nt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;fe.extend({htmlPrefilter:function(e){return e.replace(Ze,"<$1></$2>")},clone:function(e,t,n){var a,r,i,s,o=e.cloneNode(!0),l=fe.contains(e.ownerDocument,e);if(!(ce.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||fe.isXMLDoc(e)))for(s=y(o),a=0,r=(i=y(e)).length;a<r;a++)D(i[a],s[a]);if(t)if(n)for(i=i||y(e),s=s||y(o),a=0,r=i.length;a<r;a++)z(i[a],s[a]);else z(e,o);return(s=y(o,"script")).length>0&&w(s,!l&&y(e,"script")),o},cleanData:function(e){for(var t,n,a,r=fe.event.special,i=0;void 0!==(n=e[i]);i++)if(Ie(n)){if(t=n[Ae.expando]){if(t.events)for(a in t.events)r[a]?fe.event.remove(n,a):fe.removeEvent(n,a,t.handle);n[Ae.expando]=void 0}n[Ne.expando]&&(n[Ne.expando]=void 0)}}}),fe.fn.extend({detach:function(e){return L(this,e,!0)},remove:function(e){return L(this,e)},text:function(e){return Le(this,function(e){return void 0===e?fe.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return P(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||E(this,e).appendChild(e)})},prepend:function(){return P(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=E(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return P(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return P(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(fe.cleanData(y(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return fe.clone(this,e,t)})},html:function(e){return Le(this,function(e){var t=this[0]||{},n=0,a=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Je.test(e)&&!$e[(Ge.exec(e)||["",""])[1].toLowerCase()]){e=fe.htmlPrefilter(e);try{for(;n<a;n++)1===(t=this[n]||{}).nodeType&&(fe.cleanData(y(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return P(this,arguments,function(t){var n=this.parentNode;fe.inArray(this,e)<0&&(fe.cleanData(y(this)),n&&n.replaceChild(t,this))},e)}}),fe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){fe.fn[e]=function(e){for(var n,a=[],r=fe(e),i=r.length-1,s=0;s<=i;s++)n=s===i?this:this.clone(!0),fe(r[s])[t](n),ie.apply(a,n.get());return this.pushStack(a)}});var at=/^margin/,rt=new RegExp("^("+Oe+")(?!px)[a-z%]+$","i"),it=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)};!function(){function t(){if(o){o.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",o.innerHTML="",_e.appendChild(s);var t=e.getComputedStyle(o);n="1%"!==t.top,i="2px"===t.marginLeft,a="4px"===t.width,o.style.marginRight="50%",r="4px"===t.marginRight,_e.removeChild(s),o=null}}var n,a,r,i,s=te.createElement("div"),o=te.createElement("div");o.style&&(o.style.backgroundClip="content-box",o.cloneNode(!0).style.backgroundClip="",ce.clearCloneStyle="content-box"===o.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(o),fe.extend(ce,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return t(),a},pixelMarginRight:function(){return t(),r},reliableMarginLeft:function(){return t(),i}}))}();var st=/^(none|table(?!-c[ea]).+)/,ot=/^--/,lt={position:"absolute",visibility:"hidden",display:"block"},ut={letterSpacing:"0",fontWeight:"400"},pt=["Webkit","Moz","ms"],dt=te.createElement("div").style;fe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=I(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,a){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,i,s,o=fe.camelCase(t),l=ot.test(t),u=e.style;if(l||(t=H(o)),s=fe.cssHooks[t]||fe.cssHooks[o],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(e,!1,a))?r:u[t];"string"==(i=typeof n)&&(r=je.exec(n))&&r[1]&&(n=m(e,t,r),i="number"),null!=n&&n===n&&("number"===i&&(n+=r&&r[3]||(fe.cssNumber[o]?"":"px")),ce.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,a))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,a){var r,i,s,o=fe.camelCase(t);return ot.test(t)||(t=H(o)),(s=fe.cssHooks[t]||fe.cssHooks[o])&&"get"in s&&(r=s.get(e,!0,n)),void 0===r&&(r=I(e,t,a)),"normal"===r&&t in ut&&(r=ut[t]),""===n||n?(i=parseFloat(r),!0===n||isFinite(i)?i||0:r):r}}),fe.each(["height","width"],function(e,t){fe.cssHooks[t]={get:function(e,n,a){if(n)return!st.test(fe.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?j(e,t,a):Xe(e,lt,function(){return j(e,t,a)})},set:function(e,n,a){var r,i=a&&it(e),s=a&&O(e,t,a,"border-box"===fe.css(e,"boxSizing",!1,i),i);return s&&(r=je.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=fe.css(e,t)),B(0,n,s)}}}),fe.cssHooks.marginLeft=A(ce.reliableMarginLeft,function(e,t){if(t)return(parseFloat(I(e,"marginLeft"))||e.getBoundingClientRect().left-Xe(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),fe.each({margin:"",padding:"",border:"Width"},function(e,t){fe.cssHooks[e+t]={expand:function(n){for(var a=0,r={},i="string"==typeof n?n.split(" "):[n];a<4;a++)r[e+qe[a]+t]=i[a]||i[a-2]||i[0];return r}},at.test(e)||(fe.cssHooks[e+t].set=B)}),fe.fn.extend({css:function(e,t){return Le(this,function(e,t,n){var a,r,i={},s=0;if(Array.isArray(t)){for(a=it(e),r=t.length;s<r;s++)i[t[s]]=fe.css(e,t[s],!1,a);return i}return void 0!==n?fe.style(e,t,n):fe.css(e,t)},e,t,arguments.length>1)}}),fe.Tween=q,q.prototype={constructor:q,init:function(e,t,n,a,r,i){this.elem=e,this.prop=n,this.easing=r||fe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=a,this.unit=i||(fe.cssNumber[n]?"":"px")},cur:function(){var e=q.propHooks[this.prop];return e&&e.get?e.get(this):q.propHooks._default.get(this)},run:function(e){var t,n=q.propHooks[this.prop];return this.options.duration?this.pos=t=fe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):q.propHooks._default.set(this),this}},q.prototype.init.prototype=q.prototype,q.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=fe.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){fe.fx.step[e.prop]?fe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[fe.cssProps[e.prop]]&&!fe.cssHooks[e.prop]?e.elem[e.prop]=e.now:fe.style(e.elem,e.prop,e.now+e.unit)}}},q.propHooks.scrollTop=q.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},fe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},fe.fx=q.prototype.init,fe.fx.step={};var ct,ft,ht=/^(?:toggle|show|hide)$/,mt=/queueHooks$/;fe.Animation=fe.extend(Y,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return m(n.elem,e,je.exec(t),n),n}]},tweener:function(e,t){fe.isFunction(e)?(t=e,e=["*"]):e=e.match(ze);for(var n,a=0,r=e.length;a<r;a++)n=e[a],Y.tweeners[n]=Y.tweeners[n]||[],Y.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var a,r,i,s,o,l,u,p,d="width"in t||"height"in t,c=this,f={},h=e.style,m=e.nodeType&&Re(e),g=Ae.get(e,"fxshow");n.queue||(null==(s=fe._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,o=s.empty.fire,s.empty.fire=function(){s.unqueued||o()}),s.unqueued++,c.always(function(){c.always(function(){s.unqueued--,fe.queue(e,"fx").length||s.empty.fire()})}));for(a in t)if(r=t[a],ht.test(r)){if(delete t[a],i=i||"toggle"===r,r===(m?"hide":"show")){if("show"!==r||!g||void 0===g[a])continue;m=!0}f[a]=g&&g[a]||fe.style(e,a)}if((l=!fe.isEmptyObject(t))||!fe.isEmptyObject(f)){d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(u=g&&g.display)&&(u=Ae.get(e,"display")),"none"===(p=fe.css(e,"display"))&&(u?p=u:(v([e],!0),u=e.style.display||u,p=fe.css(e,"display"),v([e]))),("inline"===p||"inline-block"===p&&null!=u)&&"none"===fe.css(e,"float")&&(l||(c.done(function(){h.display=u}),null==u&&(p=h.display,u="none"===p?"":p)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",c.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1;for(a in f)l||(g?"hidden"in g&&(m=g.hidden):g=Ae.access(e,"fxshow",{display:u}),i&&(g.hidden=!m),m&&v([e],!0),c.done(function(){m||v([e]),Ae.remove(e,"fxshow");for(a in f)fe.style(e,a,f[a])})),l=F(m?g[a]:0,a,c),a in g||(g[a]=l.start,m&&(l.end=l.start,l.start=0))}}],prefilter:function(e,t){t?Y.prefilters.unshift(e):Y.prefilters.push(e)}}),fe.speed=function(e,t,n){var a=e&&"object"==typeof e?fe.extend({},e):{complete:n||!n&&t||fe.isFunction(e)&&e,duration:e,easing:n&&t||t&&!fe.isFunction(t)&&t};return fe.fx.off?a.duration=0:"number"!=typeof a.duration&&(a.duration in fe.fx.speeds?a.duration=fe.fx.speeds[a.duration]:a.duration=fe.fx.speeds._default),null!=a.queue&&!0!==a.queue||(a.queue="fx"),a.old=a.complete,a.complete=function(){fe.isFunction(a.old)&&a.old.call(this),a.queue&&fe.dequeue(this,a.queue)},a},fe.fn.extend({fadeTo:function(e,t,n,a){return this.filter(Re).css("opacity",0).show().end().animate({opacity:t},e,n,a)},animate:function(e,t,n,a){var r=fe.isEmptyObject(e),i=fe.speed(t,n,a),s=function(){var t=Y(this,fe.extend({},e),i);(r||Ae.get(this,"finish"))&&t.stop(!0)};return s.finish=s,r||!1===i.queue?this.each(s):this.queue(i.queue,s)},stop:function(e,t,n){var a=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",i=fe.timers,s=Ae.get(this);if(r)s[r]&&s[r].stop&&a(s[r]);else for(r in s)s[r]&&s[r].stop&&mt.test(r)&&a(s[r]);for(r=i.length;r--;)i[r].elem!==this||null!=e&&i[r].queue!==e||(i[r].anim.stop(n),t=!1,i.splice(r,1));!t&&n||fe.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Ae.get(this),a=n[e+"queue"],r=n[e+"queueHooks"],i=fe.timers,s=a?a.length:0;for(n.finish=!0,fe.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<s;t++)a[t]&&a[t].finish&&a[t].finish.call(this);delete n.finish})}}),fe.each(["toggle","show","hide"],function(e,t){var n=fe.fn[t];fe.fn[t]=function(e,a,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(W(t,!0),e,a,r)}}),fe.each({slideDown:W("show"),slideUp:W("hide"),slideToggle:W("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){fe.fn[e]=function(e,n,a){return this.animate(t,e,n,a)}}),fe.timers=[],fe.fx.tick=function(){var e,t=0,n=fe.timers;for(ct=fe.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||fe.fx.stop(),ct=void 0},fe.fx.timer=function(e){fe.timers.push(e),fe.fx.start()},fe.fx.interval=13,fe.fx.start=function(){ft||(ft=!0,R())},fe.fx.stop=function(){ft=null},fe.fx.speeds={slow:600,fast:200,_default:400},fe.fn.delay=function(t,n){return t=fe.fx?fe.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,a){var r=e.setTimeout(n,t);a.stop=function(){e.clearTimeout(r)}})},function(){var e=te.createElement("input"),t=te.createElement("select").appendChild(te.createElement("option"));e.type="checkbox",ce.checkOn=""!==e.value,ce.optSelected=t.selected,(e=te.createElement("input")).value="t",e.type="radio",ce.radioValue="t"===e.value}();var gt,vt=fe.expr.attrHandle;fe.fn.extend({attr:function(e,t){return Le(this,fe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){fe.removeAttr(this,e)})}}),fe.extend({attr:function(e,t,n){var a,r,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?fe.prop(e,t,n):(1===i&&fe.isXMLDoc(e)||(r=fe.attrHooks[t.toLowerCase()]||(fe.expr.match.bool.test(t)?gt:void 0)),void 0!==n?null===n?void fe.removeAttr(e,t):r&&"set"in r&&void 0!==(a=r.set(e,n,t))?a:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(a=r.get(e,t))?a:null==(a=fe.find.attr(e,t))?void 0:a)},attrHooks:{type:{set:function(e,t){if(!ce.radioValue&&"radio"===t&&r(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,a=0,r=t&&t.match(ze);if(r&&1===e.nodeType)for(;n=r[a++];)e.removeAttribute(n)}}),gt={set:function(e,t,n){return!1===t?fe.removeAttr(e,n):e.setAttribute(n,n),n}},fe.each(fe.expr.match.bool.source.match(/\w+/g),function(e,t){var n=vt[t]||fe.find.attr;vt[t]=function(e,t,a){var r,i,s=t.toLowerCase();return a||(i=vt[s],vt[s]=r,r=null!=n(e,t,a)?s:null,vt[s]=i),r}});var yt=/^(?:input|select|textarea|button)$/i,wt=/^(?:a|area)$/i;fe.fn.extend({prop:function(e,t){return Le(this,fe.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[fe.propFix[e]||e]})}}),fe.extend({prop:function(e,t,n){var a,r,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&fe.isXMLDoc(e)||(t=fe.propFix[t]||t,r=fe.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(a=r.set(e,n,t))?a:e[t]=n:r&&"get"in r&&null!==(a=r.get(e,t))?a:e[t]},propHooks:{tabIndex:{get:function(e){var t=fe.find.attr(e,"tabindex");return t?parseInt(t,10):yt.test(e.nodeName)||wt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),ce.optSelected||(fe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),fe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){fe.propFix[this.toLowerCase()]=this}),fe.fn.extend({addClass:function(e){var t,n,a,r,i,s,o,l=0;if(fe.isFunction(e))return this.each(function(t){fe(this).addClass(e.call(this,t,V(this)))});if("string"==typeof e&&e)for(t=e.match(ze)||[];n=this[l++];)if(r=V(n),a=1===n.nodeType&&" "+$(r)+" "){for(s=0;i=t[s++];)a.indexOf(" "+i+" ")<0&&(a+=i+" ");r!==(o=$(a))&&n.setAttribute("class",o)}return this},removeClass:function(e){var t,n,a,r,i,s,o,l=0;if(fe.isFunction(e))return this.each(function(t){fe(this).removeClass(e.call(this,t,V(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(ze)||[];n=this[l++];)if(r=V(n),a=1===n.nodeType&&" "+$(r)+" "){for(s=0;i=t[s++];)for(;a.indexOf(" "+i+" ")>-1;)a=a.replace(" "+i+" "," ");r!==(o=$(a))&&n.setAttribute("class",o)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):fe.isFunction(e)?this.each(function(n){fe(this).toggleClass(e.call(this,n,V(this),t),t)}):this.each(function(){var t,a,r,i;if("string"===n)for(a=0,r=fe(this),i=e.match(ze)||[];t=i[a++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else void 0!==e&&"boolean"!==n||((t=V(this))&&Ae.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Ae.get(this,"__className__")||""))})},hasClass:function(e){var t,n,a=0;for(t=" "+e+" ";n=this[a++];)if(1===n.nodeType&&(" "+$(V(n))+" ").indexOf(t)>-1)return!0;return!1}});var xt=/\r/g;fe.fn.extend({val:function(e){var t,n,a,r=this[0];{if(arguments.length)return a=fe.isFunction(e),this.each(function(n){var r;1===this.nodeType&&(null==(r=a?e.call(this,n,fe(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=fe.map(r,function(e){return null==e?"":e+""})),(t=fe.valHooks[this.type]||fe.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))});if(r)return(t=fe.valHooks[r.type]||fe.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(xt,""):null==n?"":n}}}),fe.extend({valHooks:{option:{get:function(e){var t=fe.find.attr(e,"value");return null!=t?t:$(fe.text(e))}},select:{get:function(e){var t,n,a,i=e.options,s=e.selectedIndex,o="select-one"===e.type,l=o?null:[],u=o?s+1:i.length;for(a=s<0?u:o?s:0;a<u;a++)if(((n=i[a]).selected||a===s)&&!n.disabled&&(!n.parentNode.disabled||!r(n.parentNode,"optgroup"))){if(t=fe(n).val(),o)return t;l.push(t)}return l},set:function(e,t){for(var n,a,r=e.options,i=fe.makeArray(t),s=r.length;s--;)((a=r[s]).selected=fe.inArray(fe.valHooks.option.get(a),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),fe.each(["radio","checkbox"],function(){fe.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=fe.inArray(fe(e).val(),t)>-1}},ce.checkOn||(fe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var bt=/^(?:focusinfocus|focusoutblur)$/;fe.extend(fe.event,{trigger:function(t,n,a,r){var i,s,o,l,u,p,d,c=[a||te],f=ue.call(t,"type")?t.type:t,h=ue.call(t,"namespace")?t.namespace.split("."):[];if(s=o=a=a||te,3!==a.nodeType&&8!==a.nodeType&&!bt.test(f+fe.event.triggered)&&(f.indexOf(".")>-1&&(f=(h=f.split(".")).shift(),h.sort()),u=f.indexOf(":")<0&&"on"+f,t=t[fe.expando]?t:new fe.Event(f,"object"==typeof t&&t),t.isTrigger=r?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=a),n=null==n?[t]:fe.makeArray(n,[t]),d=fe.event.special[f]||{},r||!d.trigger||!1!==d.trigger.apply(a,n))){if(!r&&!d.noBubble&&!fe.isWindow(a)){for(l=d.delegateType||f,bt.test(l+f)||(s=s.parentNode);s;s=s.parentNode)c.push(s),o=s;o===(a.ownerDocument||te)&&c.push(o.defaultView||o.parentWindow||e)}for(i=0;(s=c[i++])&&!t.isPropagationStopped();)t.type=i>1?l:d.bindType||f,(p=(Ae.get(s,"events")||{})[t.type]&&Ae.get(s,"handle"))&&p.apply(s,n),(p=u&&s[u])&&p.apply&&Ie(s)&&(t.result=p.apply(s,n),!1===t.result&&t.preventDefault());return t.type=f,r||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(c.pop(),n)||!Ie(a)||u&&fe.isFunction(a[f])&&!fe.isWindow(a)&&((o=a[u])&&(a[u]=null),fe.event.triggered=f,a[f](),fe.event.triggered=void 0,o&&(a[u]=o)),t.result}},simulate:function(e,t,n){var a=fe.extend(new fe.Event,n,{type:e,isSimulated:!0});fe.event.trigger(a,null,t)}}),fe.fn.extend({trigger:function(e,t){return this.each(function(){fe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return fe.event.trigger(e,t,n,!0)}}),fe.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){fe.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),fe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),ce.focusin="onfocusin"in e,ce.focusin||fe.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){fe.event.simulate(t,e.target,fe.event.fix(e))};fe.event.special[t]={setup:function(){var a=this.ownerDocument||this,r=Ae.access(a,t);r||a.addEventListener(e,n,!0),Ae.access(a,t,(r||0)+1)},teardown:function(){var a=this.ownerDocument||this,r=Ae.access(a,t)-1;r?Ae.access(a,t,r):(a.removeEventListener(e,n,!0),Ae.remove(a,t))}}});var Tt=e.location,Ct=fe.now(),St=/\?/;fe.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||fe.error("Invalid XML: "+t),n};var Et=/\[\]$/,Mt=/\r?\n/g,kt=/^(?:submit|button|image|reset|file)$/i,zt=/^(?:input|select|textarea|keygen)/i;fe.param=function(e,t){var n,a=[],r=function(e,t){var n=fe.isFunction(t)?t():t;a[a.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!fe.isPlainObject(e))fe.each(e,function(){r(this.name,this.value)});else for(n in e)_(n,e[n],t,r);return a.join("&")},fe.fn.extend({serialize:function(){return fe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=fe.prop(this,"elements");return e?fe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!fe(this).is(":disabled")&&zt.test(this.nodeName)&&!kt.test(e)&&(this.checked||!Fe.test(e))}).map(function(e,t){var n=fe(this).val();return null==n?null:Array.isArray(n)?fe.map(n,function(e){return{name:t.name,value:e.replace(Mt,"\r\n")}}):{name:t.name,value:n.replace(Mt,"\r\n")}}).get()}});var Dt=/%20/g,Pt=/#.*$/,Lt=/([?&])_=[^&]*/,It=/^(.*?):[ \t]*([^\r\n]*)$/gm,At=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Nt=/^(?:GET|HEAD)$/,Ht=/^\/\//,Bt={},Ot={},jt="*/".concat("*"),qt=te.createElement("a");qt.href=Tt.href,fe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Tt.href,type:"GET",isLocal:At.test(Tt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":jt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":fe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Q(Q(e,fe.ajaxSettings),t):Q(fe.ajaxSettings,e)},ajaxPrefilter:U(Bt),ajaxTransport:U(Ot),ajax:function(t,n){function a(t,n,a,o){var u,c,f,x,b,T=n;p||(p=!0,l&&e.clearTimeout(l),r=void 0,s=o||"",C.readyState=t>0?4:0,u=t>=200&&t<300||304===t,a&&(x=Z(h,C,a)),x=J(h,x,C,u),u?(h.ifModified&&((b=C.getResponseHeader("Last-Modified"))&&(fe.lastModified[i]=b),(b=C.getResponseHeader("etag"))&&(fe.etag[i]=b)),204===t||"HEAD"===h.type?T="nocontent":304===t?T="notmodified":(T=x.state,c=x.data,u=!(f=x.error))):(f=T,!t&&T||(T="error",t<0&&(t=0))),C.status=t,C.statusText=(n||T)+"",u?v.resolveWith(m,[c,T,C]):v.rejectWith(m,[C,T,f]),C.statusCode(w),w=void 0,d&&g.trigger(u?"ajaxSuccess":"ajaxError",[C,h,u?c:f]),y.fireWith(m,[C,T]),d&&(g.trigger("ajaxComplete",[C,h]),--fe.active||fe.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var r,i,s,o,l,u,p,d,c,f,h=fe.ajaxSetup({},n),m=h.context||h,g=h.context&&(m.nodeType||m.jquery)?fe(m):fe.event,v=fe.Deferred(),y=fe.Callbacks("once memory"),w=h.statusCode||{},x={},b={},T="canceled",C={readyState:0,getResponseHeader:function(e){var t;if(p){if(!o)for(o={};t=It.exec(s);)o[t[1].toLowerCase()]=t[2];t=o[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return p?s:null},setRequestHeader:function(e,t){return null==p&&(e=b[e.toLowerCase()]=b[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==p&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(p)C.always(e[C.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||T;return r&&r.abort(t),a(0,t),this}};if(v.promise(C),h.url=((t||h.url||Tt.href)+"").replace(Ht,Tt.protocol+"//"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(ze)||[""],null==h.crossDomain){u=te.createElement("a");try{u.href=h.url,u.href=u.href,h.crossDomain=qt.protocol+"//"+qt.host!=u.protocol+"//"+u.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=fe.param(h.data,h.traditional)),K(Bt,h,n,C),p)return C;(d=fe.event&&h.global)&&0==fe.active++&&fe.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Nt.test(h.type),i=h.url.replace(Pt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Dt,"+")):(f=h.url.slice(i.length),h.data&&(i+=(St.test(i)?"&":"?")+h.data,delete h.data),!1===h.cache&&(i=i.replace(Lt,"$1"),f=(St.test(i)?"&":"?")+"_="+Ct+++f),h.url=i+f),h.ifModified&&(fe.lastModified[i]&&C.setRequestHeader("If-Modified-Since",fe.lastModified[i]),fe.etag[i]&&C.setRequestHeader("If-None-Match",fe.etag[i])),(h.data&&h.hasContent&&!1!==h.contentType||n.contentType)&&C.setRequestHeader("Content-Type",h.contentType),C.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+jt+"; q=0.01":""):h.accepts["*"]);for(c in h.headers)C.setRequestHeader(c,h.headers[c]);if(h.beforeSend&&(!1===h.beforeSend.call(m,C,h)||p))return C.abort();if(T="abort",y.add(h.complete),C.done(h.success),C.fail(h.error),r=K(Ot,h,n,C)){if(C.readyState=1,d&&g.trigger("ajaxSend",[C,h]),p)return C;h.async&&h.timeout>0&&(l=e.setTimeout(function(){C.abort("timeout")},h.timeout));try{p=!1,r.send(x,a)}catch(e){if(p)throw e;a(-1,e)}}else a(-1,"No Transport");return C},getJSON:function(e,t,n){return fe.get(e,t,n,"json")},getScript:function(e,t){return fe.get(e,void 0,t,"script")}}),fe.each(["get","post"],function(e,t){fe[t]=function(e,n,a,r){return fe.isFunction(n)&&(r=r||a,a=n,n=void 0),fe.ajax(fe.extend({url:e,type:t,dataType:r,data:n,success:a},fe.isPlainObject(e)&&e))}}),fe._evalUrl=function(e){return fe.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},fe.fn.extend({wrapAll:function(e){var t;return this[0]&&(fe.isFunction(e)&&(e=e.call(this[0])),t=fe(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return fe.isFunction(e)?this.each(function(t){fe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=fe(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=fe.isFunction(e);return this.each(function(n){fe(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){fe(this).replaceWith(this.childNodes)}),this}}),fe.expr.pseudos.hidden=function(e){return!fe.expr.pseudos.visible(e)},fe.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},fe.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Rt={0:200,1223:204},Xt=fe.ajaxSettings.xhr();ce.cors=!!Xt&&"withCredentials"in Xt,ce.ajax=Xt=!!Xt,fe.ajaxTransport(function(t){var n,a;if(ce.cors||Xt&&!t.crossDomain)return{send:function(r,i){var s,o=t.xhr();if(o.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)o[s]=t.xhrFields[s];t.mimeType&&o.overrideMimeType&&o.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(s in r)o.setRequestHeader(s,r[s]);n=function(e){return function(){n&&(n=a=o.onload=o.onerror=o.onabort=o.onreadystatechange=null,"abort"===e?o.abort():"error"===e?"number"!=typeof o.status?i(0,"error"):i(o.status,o.statusText):i(Rt[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=n(),a=o.onerror=n("error"),void 0!==o.onabort?o.onabort=a:o.onreadystatechange=function(){4===o.readyState&&e.setTimeout(function(){n&&a()})},n=n("abort");try{o.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),fe.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),fe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return fe.globalEval(e),e}}}),fe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),fe.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(a,r){t=fe("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),te.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Wt=[],Ft=/(=)\?(?=&|$)|\?\?/;fe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Wt.pop()||fe.expando+"_"+Ct++;return this[e]=!0,e}}),fe.ajaxPrefilter("json jsonp",function(t,n,a){var r,i,s,o=!1!==t.jsonp&&(Ft.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ft.test(t.data)&&"data");if(o||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=fe.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,o?t[o]=t[o].replace(Ft,"$1"+r):!1!==t.jsonp&&(t.url+=(St.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return s||fe.error(r+" was not called"),s[0]},t.dataTypes[0]="json",i=e[r],e[r]=function(){s=arguments},a.always(function(){void 0===i?fe(e).removeProp(r):e[r]=i,t[r]&&(t.jsonpCallback=n.jsonpCallback,Wt.push(r)),s&&fe.isFunction(i)&&i(s[0]),s=i=void 0}),"script"}),ce.createHTMLDocument=function(){var e=te.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),fe.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var a,r,i;return t||(ce.createHTMLDocument?((a=(t=te.implementation.createHTMLDocument("")).createElement("base")).href=te.location.href,t.head.appendChild(a)):t=te),r=Te.exec(e),i=!n&&[],r?[t.createElement(r[1])]:(r=x([e],t,i),i&&i.length&&fe(i).remove(),fe.merge([],r.childNodes))},fe.fn.load=function(e,t,n){var a,r,i,s=this,o=e.indexOf(" ");return o>-1&&(a=$(e.slice(o)),e=e.slice(0,o)),fe.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),s.length>0&&fe.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){i=arguments,s.html(a?fe("<div>").append(fe.parseHTML(e)).find(a):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,i||[e.responseText,t,e])})}),this},fe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){fe.fn[t]=function(e){return this.on(t,e)}}),fe.expr.pseudos.animated=function(e){return fe.grep(fe.timers,function(t){return e===t.elem}).length},fe.offset={setOffset:function(e,t,n){var a,r,i,s,o,l,u=fe.css(e,"position"),p=fe(e),d={};"static"===u&&(e.style.position="relative"),o=p.offset(),i=fe.css(e,"top"),l=fe.css(e,"left"),("absolute"===u||"fixed"===u)&&(i+l).indexOf("auto")>-1?(s=(a=p.position()).top,r=a.left):(s=parseFloat(i)||0,r=parseFloat(l)||0),fe.isFunction(t)&&(t=t.call(e,n,fe.extend({},o))),null!=t.top&&(d.top=t.top-o.top+s),null!=t.left&&(d.left=t.left-o.left+r),"using"in t?t.using.call(e,d):p.css(d)}},fe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){fe.offset.setOffset(this,e,t)});var t,n,a,r,i=this[0];if(i)return i.getClientRects().length?(a=i.getBoundingClientRect(),t=i.ownerDocument,n=t.documentElement,r=t.defaultView,{top:a.top+r.pageYOffset-n.clientTop,left:a.left+r.pageXOffset-n.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n=this[0],a={top:0,left:0};return"fixed"===fe.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),r(e[0],"html")||(a=e.offset()),a={top:a.top+fe.css(e[0],"borderTopWidth",!0),left:a.left+fe.css(e[0],"borderLeftWidth",!0)}),{top:t.top-a.top-fe.css(n,"marginTop",!0),left:t.left-a.left-fe.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===fe.css(e,"position");)e=e.offsetParent;return e||_e})}}),fe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;fe.fn[e]=function(a){return Le(this,function(e,a,r){var i;if(fe.isWindow(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===r)return i?i[t]:e[a];i?i.scrollTo(n?i.pageXOffset:r,n?r:i.pageYOffset):e[a]=r},e,a,arguments.length)}}),fe.each(["top","left"],function(e,t){fe.cssHooks[t]=A(ce.pixelPosition,function(e,n){if(n)return n=I(e,t),rt.test(n)?fe(e).position()[t]+"px":n})}),fe.each({Height:"height",Width:"width"},function(e,t){fe.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,a){fe.fn[a]=function(r,i){var s=arguments.length&&(n||"boolean"!=typeof r),o=n||(!0===r||!0===i?"margin":"border");return Le(this,function(t,n,r){var i;return fe.isWindow(t)?0===a.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===r?fe.css(t,n,o):fe.style(t,n,r,o)},t,s?r:void 0,s)}})}),fe.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,a){return this.on(t,e,n,a)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),fe.holdReady=function(e){e?fe.readyWait++:fe.ready(!0)},fe.isArray=Array.isArray,fe.parseJSON=JSON.parse,fe.nodeName=r,"function"==typeof define&&define.amd&&define("jquery",[],function(){return fe});var Gt=e.jQuery,Yt=e.$;return fe.noConflict=function(t){return e.$===fe&&(e.$=Yt),t&&e.jQuery===fe&&(e.jQuery=Gt),fe},t||(e.jQuery=e.$=fe),fe}),function(){var e,t=function(a,r){function i(e){return Math.floor(e)}function s(){var e=b.params.autoplay,t=b.slides.eq(b.activeIndex);t.attr("data-swiper-autoplay")&&(e=t.attr("data-swiper-autoplay")||b.params.autoplay),b.autoplayTimeoutId=setTimeout(function(){b.params.loop?(b.fixLoop(),b._slideNext(),b.emit("onAutoplay",b)):b.isEnd?r.autoplayStopOnLast?b.stopAutoplay():(b._slideTo(0),b.emit("onAutoplay",b)):(b._slideNext(),b.emit("onAutoplay",b))},e)}function o(t,n){var a=e(t.target);if(!a.is(n))if("string"==typeof n)a=a.parents(n);else if(n.nodeType){var r;return a.parents().each(function(e,t){t===n&&(r=n)}),r?n:void 0}if(0!==a.length)return a[0]}function l(e,t){t=t||{};var n=new(window.MutationObserver||window.WebkitMutationObserver)(function(e){e.forEach(function(e){b.onResize(!0),b.emit("onObserverUpdate",b,e)})});n.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),b.observers.push(n)}function u(e){e.originalEvent&&(e=e.originalEvent);var t=e.keyCode||e.charCode;if(!b.params.allowSwipeToNext&&(b.isHorizontal()&&39===t||!b.isHorizontal()&&40===t))return!1;if(!b.params.allowSwipeToPrev&&(b.isHorizontal()&&37===t||!b.isHorizontal()&&38===t))return!1;if(!(e.shiftKey||e.altKey||e.ctrlKey||e.metaKey||document.activeElement&&document.activeElement.nodeName&&("input"===document.activeElement.nodeName.toLowerCase()||"textarea"===document.activeElement.nodeName.toLowerCase()))){if(37===t||39===t||38===t||40===t){var n=!1;if(b.container.parents("."+b.params.slideClass).length>0&&0===b.container.parents("."+b.params.slideActiveClass).length)return;var a={left:window.pageXOffset,top:window.pageYOffset},r=window.innerWidth,i=window.innerHeight,s=b.container.offset();b.rtl&&(s.left=s.left-b.container[0].scrollLeft);for(var o=[[s.left,s.top],[s.left+b.width,s.top],[s.left,s.top+b.height],[s.left+b.width,s.top+b.height]],l=0;l<o.length;l++){var u=o[l];u[0]>=a.left&&u[0]<=a.left+r&&u[1]>=a.top&&u[1]<=a.top+i&&(n=!0)}if(!n)return}b.isHorizontal()?(37!==t&&39!==t||(e.preventDefault?e.preventDefault():e.returnValue=!1),(39===t&&!b.rtl||37===t&&b.rtl)&&b.slideNext(),(37===t&&!b.rtl||39===t&&b.rtl)&&b.slidePrev()):(38!==t&&40!==t||(e.preventDefault?e.preventDefault():e.returnValue=!1),40===t&&b.slideNext(),38===t&&b.slidePrev()),b.emit("onKeyPress",b,t)}}function p(e){var t=0,n=0,a=0,r=0;return"detail"in e&&(n=e.detail),"wheelDelta"in e&&(n=-e.wheelDelta/120),"wheelDeltaY"in e&&(n=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=n,n=0),a=10*t,r=10*n,"deltaY"in e&&(r=e.deltaY),"deltaX"in e&&(a=e.deltaX),(a||r)&&e.deltaMode&&(1===e.deltaMode?(a*=40,r*=40):(a*=800,r*=800)),a&&!t&&(t=a<1?-1:1),r&&!n&&(n=r<1?-1:1),{spinX:t,spinY:n,pixelX:a,pixelY:r}}function d(e){e.originalEvent&&(e=e.originalEvent);var t=0,n=b.rtl?-1:1,a=p(e);if(b.params.mousewheelForceToAxis)if(b.isHorizontal()){if(!(Math.abs(a.pixelX)>Math.abs(a.pixelY)))return;t=a.pixelX*n}else{if(!(Math.abs(a.pixelY)>Math.abs(a.pixelX)))return;t=a.pixelY}else t=Math.abs(a.pixelX)>Math.abs(a.pixelY)?-a.pixelX*n:-a.pixelY;if(0!==t){if(b.params.mousewheelInvert&&(t=-t),b.params.freeMode){var r=b.getWrapperTranslate()+t*b.params.mousewheelSensitivity,i=b.isBeginning,s=b.isEnd;if(r>=b.minTranslate()&&(r=b.minTranslate()),r<=b.maxTranslate()&&(r=b.maxTranslate()),b.setWrapperTransition(0),b.setWrapperTranslate(r),b.updateProgress(),b.updateActiveIndex(),(!i&&b.isBeginning||!s&&b.isEnd)&&b.updateClasses(),b.params.freeModeSticky?(clearTimeout(b.mousewheel.timeout),b.mousewheel.timeout=setTimeout(function(){b.slideReset()},300)):b.params.lazyLoading&&b.lazy&&b.lazy.load(),b.emit("onScroll",b,e),b.params.autoplay&&b.params.autoplayDisableOnInteraction&&b.stopAutoplay(),0===r||r===b.maxTranslate())return}else{if((new window.Date).getTime()-b.mousewheel.lastScrollTime>60)if(t<0)if(b.isEnd&&!b.params.loop||b.animating){if(b.params.mousewheelReleaseOnEdges)return!0}else b.slideNext(),b.emit("onScroll",b,e);else if(b.isBeginning&&!b.params.loop||b.animating){if(b.params.mousewheelReleaseOnEdges)return!0}else b.slidePrev(),b.emit("onScroll",b,e);b.mousewheel.lastScrollTime=(new window.Date).getTime()}return e.preventDefault?e.preventDefault():e.returnValue=!1,!1}}function c(t,n){t=e(t);var a,r,i,s=b.rtl?-1:1;a=t.attr("data-swiper-parallax")||"0",r=t.attr("data-swiper-parallax-x"),i=t.attr("data-swiper-parallax-y"),r||i?(r=r||"0",i=i||"0"):b.isHorizontal()?(r=a,i="0"):(i=a,r="0"),r=r.indexOf("%")>=0?parseInt(r,10)*n*s+"%":r*n*s+"px",i=i.indexOf("%")>=0?parseInt(i,10)*n+"%":i*n+"px",t.transform("translate3d("+r+", "+i+",0px)")}function f(e){return 0!==e.indexOf("on")&&(e=e[0]!==e[0].toUpperCase()?"on"+e[0].toUpperCase()+e.substring(1):"on"+e),e}if(!(this instanceof t))return new t(a,r);var h={direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,autoplay:!1,autoplayDisableOnInteraction:!0,autoplayStopOnLast:!1,iOSEdgeSwipeDetection:!1,iOSEdgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",coverflow:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0},flip:{slideShadows:!0,limitRotation:!0},cube:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94},fade:{crossFade:!1},parallax:!1,zoom:!1,zoomMax:3,zoomMin:1,zoomToggle:!0,scrollbar:null,scrollbarHide:!0,scrollbarDraggable:!1,scrollbarSnapOnRelease:!1,keyboardControl:!1,mousewheelControl:!1,mousewheelReleaseOnEdges:!1,mousewheelInvert:!1,mousewheelForceToAxis:!1,mousewheelSensitivity:1,mousewheelEventsTarged:"container",hashnav:!1,hashnavWatchState:!1,history:!1,replaceState:!1,breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,centeredSlides:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,onlyExternal:!1,threshold:0,touchMoveStopPropagation:!0,touchReleaseOnEdges:!1,uniqueNavElements:!0,pagination:null,paginationElement:"span",paginationClickable:!1,paginationHide:!1,paginationBulletRender:null,paginationProgressRender:null,paginationFractionRender:null,paginationCustomRender:null,paginationType:"bullets",resistance:!0,resistanceRatio:.85,nextButton:null,prevButton:null,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,lazyLoading:!1,lazyLoadingInPrevNext:!1,lazyLoadingInPrevNextAmount:1,lazyLoadingOnTransitionStart:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,control:void 0,controlInverse:!1,controlBy:"slide",normalizeSlideIndex:!0,allowSwipeToPrev:!0,allowSwipeToNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",buttonDisabledClass:"swiper-button-disabled",paginationCurrentClass:"swiper-pagination-current",paginationTotalClass:"swiper-pagination-total",paginationHiddenClass:"swiper-pagination-hidden",paginationProgressbarClass:"swiper-pagination-progressbar",paginationClickableClass:"swiper-pagination-clickable",paginationModifierClass:"swiper-pagination-",lazyLoadingClass:"swiper-lazy",lazyStatusLoadingClass:"swiper-lazy-loading",lazyStatusLoadedClass:"swiper-lazy-loaded",lazyPreloaderClass:"swiper-lazy-preloader",notificationClass:"swiper-notification",preloaderClass:"preloader",zoomContainerClass:"swiper-zoom-container",observer:!1,observeParents:!1,a11y:!1,prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",runCallbacksOnInit:!0},m=r&&r.virtualTranslate;r=r||{};var g={};for(var v in r)if("object"!=typeof r[v]||null===r[v]||(r[v].nodeType||r[v]===window||r[v]===document||void 0!==n&&r[v]instanceof n||"undefined"!=typeof jQuery&&r[v]instanceof jQuery))g[v]=r[v];else{g[v]={};for(var y in r[v])g[v][y]=r[v][y]}for(var w in h)if(void 0===r[w])r[w]=h[w];else if("object"==typeof r[w])for(var x in h[w])void 0===r[w][x]&&(r[w][x]=h[w][x]);var b=this;if(b.params=r,b.originalParams=g,b.classNames=[],void 0!==e&&void 0!==n&&(e=n),(void 0!==e||(e=void 0===n?window.Dom7||window.Zepto||window.jQuery:n))&&(b.$=e,b.currentBreakpoint=void 0,b.getActiveBreakpoint=function(){if(!b.params.breakpoints)return!1;var e,t=!1,n=[];for(e in b.params.breakpoints)b.params.breakpoints.hasOwnProperty(e)&&n.push(e);n.sort(function(e,t){return parseInt(e,10)>parseInt(t,10)});for(var a=0;a<n.length;a++)(e=n[a])>=window.innerWidth&&!t&&(t=e);return t||"max"},b.setBreakpoint=function(){var e=b.getActiveBreakpoint();if(e&&b.currentBreakpoint!==e){var t=e in b.params.breakpoints?b.params.breakpoints[e]:b.originalParams,n=b.params.loop&&t.slidesPerView!==b.params.slidesPerView;for(var a in t)b.params[a]=t[a];b.currentBreakpoint=e,n&&b.destroyLoop&&b.reLoop(!0)}},b.params.breakpoints&&b.setBreakpoint(),b.container=e(a),0!==b.container.length)){if(b.container.length>1){var T=[];return b.container.each(function(){T.push(new t(this,r))}),T}b.container[0].swiper=b,b.container.data("swiper",b),b.classNames.push(b.params.containerModifierClass+b.params.direction),b.params.freeMode&&b.classNames.push(b.params.containerModifierClass+"free-mode"),b.support.flexbox||(b.classNames.push(b.params.containerModifierClass+"no-flexbox"),b.params.slidesPerColumn=1),b.params.autoHeight&&b.classNames.push(b.params.containerModifierClass+"autoheight"),(b.params.parallax||b.params.watchSlidesVisibility)&&(b.params.watchSlidesProgress=!0),b.params.touchReleaseOnEdges&&(b.params.resistanceRatio=0),["cube","coverflow","flip"].indexOf(b.params.effect)>=0&&(b.support.transforms3d?(b.params.watchSlidesProgress=!0,b.classNames.push(b.params.containerModifierClass+"3d")):b.params.effect="slide"),"slide"!==b.params.effect&&b.classNames.push(b.params.containerModifierClass+b.params.effect),"cube"===b.params.effect&&(b.params.resistanceRatio=0,b.params.slidesPerView=1,b.params.slidesPerColumn=1,b.params.slidesPerGroup=1,b.params.centeredSlides=!1,b.params.spaceBetween=0,b.params.virtualTranslate=!0),"fade"!==b.params.effect&&"flip"!==b.params.effect||(b.params.slidesPerView=1,b.params.slidesPerColumn=1,b.params.slidesPerGroup=1,b.params.watchSlidesProgress=!0,b.params.spaceBetween=0,void 0===m&&(b.params.virtualTranslate=!0)),b.params.grabCursor&&b.support.touch&&(b.params.grabCursor=!1),b.wrapper=b.container.children("."+b.params.wrapperClass),b.params.pagination&&(b.paginationContainer=e(b.params.pagination),b.params.uniqueNavElements&&"string"==typeof b.params.pagination&&b.paginationContainer.length>1&&1===b.container.find(b.params.pagination).length&&(b.paginationContainer=b.container.find(b.params.pagination)),"bullets"===b.params.paginationType&&b.params.paginationClickable?b.paginationContainer.addClass(b.params.paginationModifierClass+"clickable"):b.params.paginationClickable=!1,b.paginationContainer.addClass(b.params.paginationModifierClass+b.params.paginationType)),(b.params.nextButton||b.params.prevButton)&&(b.params.nextButton&&(b.nextButton=e(b.params.nextButton),b.params.uniqueNavElements&&"string"==typeof b.params.nextButton&&b.nextButton.length>1&&1===b.container.find(b.params.nextButton).length&&(b.nextButton=b.container.find(b.params.nextButton))),b.params.prevButton&&(b.prevButton=e(b.params.prevButton),b.params.uniqueNavElements&&"string"==typeof b.params.prevButton&&b.prevButton.length>1&&1===b.container.find(b.params.prevButton).length&&(b.prevButton=b.container.find(b.params.prevButton)))),b.isHorizontal=function(){return"horizontal"===b.params.direction},b.rtl=b.isHorizontal()&&("rtl"===b.container[0].dir.toLowerCase()||"rtl"===b.container.css("direction")),b.rtl&&b.classNames.push(b.params.containerModifierClass+"rtl"),b.rtl&&(b.wrongRTL="-webkit-box"===b.wrapper.css("display")),b.params.slidesPerColumn>1&&b.classNames.push(b.params.containerModifierClass+"multirow"),b.device.android&&b.classNames.push(b.params.containerModifierClass+"android"),b.container.addClass(b.classNames.join(" ")),b.translate=0,b.progress=0,b.velocity=0,b.lockSwipeToNext=function(){b.params.allowSwipeToNext=!1,!1===b.params.allowSwipeToPrev&&b.params.grabCursor&&b.unsetGrabCursor()},b.lockSwipeToPrev=function(){b.params.allowSwipeToPrev=!1,!1===b.params.allowSwipeToNext&&b.params.grabCursor&&b.unsetGrabCursor()},b.lockSwipes=function(){b.params.allowSwipeToNext=b.params.allowSwipeToPrev=!1,b.params.grabCursor&&b.unsetGrabCursor()},b.unlockSwipeToNext=function(){b.params.allowSwipeToNext=!0,!0===b.params.allowSwipeToPrev&&b.params.grabCursor&&b.setGrabCursor()},b.unlockSwipeToPrev=function(){b.params.allowSwipeToPrev=!0,!0===b.params.allowSwipeToNext&&b.params.grabCursor&&b.setGrabCursor()},b.unlockSwipes=function(){b.params.allowSwipeToNext=b.params.allowSwipeToPrev=!0,b.params.grabCursor&&b.setGrabCursor()},b.setGrabCursor=function(e){b.container[0].style.cursor="move",b.container[0].style.cursor=e?"-webkit-grabbing":"-webkit-grab",b.container[0].style.cursor=e?"-moz-grabbin":"-moz-grab",b.container[0].style.cursor=e?"grabbing":"grab"},b.unsetGrabCursor=function(){b.container[0].style.cursor=""},b.params.grabCursor&&b.setGrabCursor(),b.imagesToLoad=[],b.imagesLoaded=0,b.loadImage=function(e,t,n,a,r,i){function s(){i&&i()}var o;e.complete&&r?s():t?((o=new window.Image).onload=s,o.onerror=s,a&&(o.sizes=a),n&&(o.srcset=n),t&&(o.src=t)):s()},b.preloadImages=function(){b.imagesToLoad=b.container.find("img");for(var e=0;e<b.imagesToLoad.length;e++)b.loadImage(b.imagesToLoad[e],b.imagesToLoad[e].currentSrc||b.imagesToLoad[e].getAttribute("src"),b.imagesToLoad[e].srcset||b.imagesToLoad[e].getAttribute("srcset"),b.imagesToLoad[e].sizes||b.imagesToLoad[e].getAttribute("sizes"),!0,function(){void 0!==b&&null!==b&&b&&(void 0!==b.imagesLoaded&&b.imagesLoaded++,b.imagesLoaded===b.imagesToLoad.length&&(b.params.updateOnImagesReady&&b.update(),b.emit("onImagesReady",b)))})},b.autoplayTimeoutId=void 0,b.autoplaying=!1,b.autoplayPaused=!1,b.startAutoplay=function(){return void 0===b.autoplayTimeoutId&&(!!b.params.autoplay&&(!b.autoplaying&&(b.autoplaying=!0,b.emit("onAutoplayStart",b),void s())))},b.stopAutoplay=function(e){b.autoplayTimeoutId&&(b.autoplayTimeoutId&&clearTimeout(b.autoplayTimeoutId),b.autoplaying=!1,b.autoplayTimeoutId=void 0,b.emit("onAutoplayStop",b))},b.pauseAutoplay=function(e){b.autoplayPaused||(b.autoplayTimeoutId&&clearTimeout(b.autoplayTimeoutId),b.autoplayPaused=!0,0===e?(b.autoplayPaused=!1,s()):b.wrapper.transitionEnd(function(){b&&(b.autoplayPaused=!1,b.autoplaying?s():b.stopAutoplay())}))},b.minTranslate=function(){return-b.snapGrid[0]},b.maxTranslate=function(){return-b.snapGrid[b.snapGrid.length-1]},b.updateAutoHeight=function(){var e,t=[],n=0;if("auto"!==b.params.slidesPerView&&b.params.slidesPerView>1)for(e=0;e<Math.ceil(b.params.slidesPerView);e++){var a=b.activeIndex+e;if(a>b.slides.length)break;t.push(b.slides.eq(a)[0])}else t.push(b.slides.eq(b.activeIndex)[0]);for(e=0;e<t.length;e++)if(void 0!==t[e]){var r=t[e].offsetHeight;n=r>n?r:n}n&&b.wrapper.css("height",n+"px")},b.updateContainerSize=function(){var e,t;e=void 0!==b.params.width?b.params.width:b.container[0].clientWidth,t=void 0!==b.params.height?b.params.height:b.container[0].clientHeight,0===e&&b.isHorizontal()||0===t&&!b.isHorizontal()||(e=e-parseInt(b.container.css("padding-left"),10)-parseInt(b.container.css("padding-right"),10),t=t-parseInt(b.container.css("padding-top"),10)-parseInt(b.container.css("padding-bottom"),10),b.width=e,b.height=t,b.size=b.isHorizontal()?b.width:b.height)},b.updateSlidesSize=function(){b.slides=b.wrapper.children("."+b.params.slideClass),b.snapGrid=[],b.slidesGrid=[],b.slidesSizesGrid=[];var e,t=b.params.spaceBetween,n=-b.params.slidesOffsetBefore,a=0,r=0;if(void 0!==b.size){"string"==typeof t&&t.indexOf("%")>=0&&(t=parseFloat(t.replace("%",""))/100*b.size),b.virtualSize=-t,b.rtl?b.slides.css({marginLeft:"",marginTop:""}):b.slides.css({marginRight:"",marginBottom:""});var s;b.params.slidesPerColumn>1&&(s=Math.floor(b.slides.length/b.params.slidesPerColumn)===b.slides.length/b.params.slidesPerColumn?b.slides.length:Math.ceil(b.slides.length/b.params.slidesPerColumn)*b.params.slidesPerColumn,"auto"!==b.params.slidesPerView&&"row"===b.params.slidesPerColumnFill&&(s=Math.max(s,b.params.slidesPerView*b.params.slidesPerColumn)));var o,l=b.params.slidesPerColumn,u=s/l,p=u-(b.params.slidesPerColumn*u-b.slides.length);for(e=0;e<b.slides.length;e++){o=0;var d=b.slides.eq(e);if(b.params.slidesPerColumn>1){var c,f,h;"column"===b.params.slidesPerColumnFill?(h=e-(f=Math.floor(e/l))*l,(f>p||f===p&&h===l-1)&&++h>=l&&(h=0,f++),c=f+h*s/l,d.css({"-webkit-box-ordinal-group":c,"-moz-box-ordinal-group":c,"-ms-flex-order":c,"-webkit-order":c,order:c})):f=e-(h=Math.floor(e/u))*u,d.css("margin-"+(b.isHorizontal()?"top":"left"),0!==h&&b.params.spaceBetween&&b.params.spaceBetween+"px").attr("data-swiper-column",f).attr("data-swiper-row",h)}"none"!==d.css("display")&&("auto"===b.params.slidesPerView?(o=b.isHorizontal()?d.outerWidth(!0):d.outerHeight(!0),b.params.roundLengths&&(o=i(o))):(o=(b.size-(b.params.slidesPerView-1)*t)/b.params.slidesPerView,b.params.roundLengths&&(o=i(o)),b.isHorizontal()?b.slides[e].style.width=o+"px":b.slides[e].style.height=o+"px"),b.slides[e].swiperSlideSize=o,b.slidesSizesGrid.push(o),b.params.centeredSlides?(n=n+o/2+a/2+t,0===a&&0!==e&&(n=n-b.size/2-t),0===e&&(n=n-b.size/2-t),Math.abs(n)<.001&&(n=0),r%b.params.slidesPerGroup==0&&b.snapGrid.push(n),b.slidesGrid.push(n)):(r%b.params.slidesPerGroup==0&&b.snapGrid.push(n),b.slidesGrid.push(n),n=n+o+t),b.virtualSize+=o+t,a=o,r++)}b.virtualSize=Math.max(b.virtualSize,b.size)+b.params.slidesOffsetAfter;var m;if(b.rtl&&b.wrongRTL&&("slide"===b.params.effect||"coverflow"===b.params.effect)&&b.wrapper.css({width:b.virtualSize+b.params.spaceBetween+"px"}),b.support.flexbox&&!b.params.setWrapperSize||(b.isHorizontal()?b.wrapper.css({width:b.virtualSize+b.params.spaceBetween+"px"}):b.wrapper.css({height:b.virtualSize+b.params.spaceBetween+"px"})),b.params.slidesPerColumn>1&&(b.virtualSize=(o+b.params.spaceBetween)*s,b.virtualSize=Math.ceil(b.virtualSize/b.params.slidesPerColumn)-b.params.spaceBetween,b.isHorizontal()?b.wrapper.css({width:b.virtualSize+b.params.spaceBetween+"px"}):b.wrapper.css({height:b.virtualSize+b.params.spaceBetween+"px"}),b.params.centeredSlides)){for(m=[],e=0;e<b.snapGrid.length;e++)b.snapGrid[e]<b.virtualSize+b.snapGrid[0]&&m.push(b.snapGrid[e]);b.snapGrid=m}if(!b.params.centeredSlides){for(m=[],e=0;e<b.snapGrid.length;e++)b.snapGrid[e]<=b.virtualSize-b.size&&m.push(b.snapGrid[e]);b.snapGrid=m,Math.floor(b.virtualSize-b.size)-Math.floor(b.snapGrid[b.snapGrid.length-1])>1&&b.snapGrid.push(b.virtualSize-b.size)}0===b.snapGrid.length&&(b.snapGrid=[0]),0!==b.params.spaceBetween&&(b.isHorizontal()?b.rtl?b.slides.css({marginLeft:t+"px"}):b.slides.css({marginRight:t+"px"}):b.slides.css({marginBottom:t+"px"})),b.params.watchSlidesProgress&&b.updateSlidesOffset()}},b.updateSlidesOffset=function(){for(var e=0;e<b.slides.length;e++)b.slides[e].swiperSlideOffset=b.isHorizontal()?b.slides[e].offsetLeft:b.slides[e].offsetTop},b.currentSlidesPerView=function(){var e,t,n=1;if(b.params.centeredSlides){var a,r=b.slides[b.activeIndex].swiperSlideSize;for(e=b.activeIndex+1;e<b.slides.length;e++)b.slides[e]&&!a&&(n++,(r+=b.slides[e].swiperSlideSize)>b.size&&(a=!0));for(t=b.activeIndex-1;t>=0;t--)b.slides[t]&&!a&&(n++,(r+=b.slides[t].swiperSlideSize)>b.size&&(a=!0))}else for(e=b.activeIndex+1;e<b.slides.length;e++)b.slidesGrid[e]-b.slidesGrid[b.activeIndex]<b.size&&n++;return n},b.updateSlidesProgress=function(e){if(void 0===e&&(e=b.translate||0),0!==b.slides.length){void 0===b.slides[0].swiperSlideOffset&&b.updateSlidesOffset();var t=-e;b.rtl&&(t=e),b.slides.removeClass(b.params.slideVisibleClass);for(var n=0;n<b.slides.length;n++){var a=b.slides[n],r=(t+(b.params.centeredSlides?b.minTranslate():0)-a.swiperSlideOffset)/(a.swiperSlideSize+b.params.spaceBetween);if(b.params.watchSlidesVisibility){var i=-(t-a.swiperSlideOffset),s=i+b.slidesSizesGrid[n];(i>=0&&i<b.size||s>0&&s<=b.size||i<=0&&s>=b.size)&&b.slides.eq(n).addClass(b.params.slideVisibleClass)}a.progress=b.rtl?-r:r}}},b.updateProgress=function(e){void 0===e&&(e=b.translate||0);var t=b.maxTranslate()-b.minTranslate(),n=b.isBeginning,a=b.isEnd;0===t?(b.progress=0,b.isBeginning=b.isEnd=!0):(b.progress=(e-b.minTranslate())/t,b.isBeginning=b.progress<=0,b.isEnd=b.progress>=1),b.isBeginning&&!n&&b.emit("onReachBeginning",b),b.isEnd&&!a&&b.emit("onReachEnd",b),b.params.watchSlidesProgress&&b.updateSlidesProgress(e),b.emit("onProgress",b,b.progress)},b.updateActiveIndex=function(){var e,t,n,a=b.rtl?b.translate:-b.translate;for(t=0;t<b.slidesGrid.length;t++)void 0!==b.slidesGrid[t+1]?a>=b.slidesGrid[t]&&a<b.slidesGrid[t+1]-(b.slidesGrid[t+1]-b.slidesGrid[t])/2?e=t:a>=b.slidesGrid[t]&&a<b.slidesGrid[t+1]&&(e=t+1):a>=b.slidesGrid[t]&&(e=t);b.params.normalizeSlideIndex&&(e<0||void 0===e)&&(e=0),(n=Math.floor(e/b.params.slidesPerGroup))>=b.snapGrid.length&&(n=b.snapGrid.length-1),e!==b.activeIndex&&(b.snapIndex=n,b.previousIndex=b.activeIndex,b.activeIndex=e,b.updateClasses(),b.updateRealIndex())},b.updateRealIndex=function(){b.realIndex=parseInt(b.slides.eq(b.activeIndex).attr("data-swiper-slide-index")||b.activeIndex,10)},b.updateClasses=function(){b.slides.removeClass(b.params.slideActiveClass+" "+b.params.slideNextClass+" "+b.params.slidePrevClass+" "+b.params.slideDuplicateActiveClass+" "+b.params.slideDuplicateNextClass+" "+b.params.slideDuplicatePrevClass);var t=b.slides.eq(b.activeIndex);t.addClass(b.params.slideActiveClass),r.loop&&(t.hasClass(b.params.slideDuplicateClass)?b.wrapper.children("."+b.params.slideClass+":not(."+b.params.slideDuplicateClass+')[data-swiper-slide-index="'+b.realIndex+'"]').addClass(b.params.slideDuplicateActiveClass):b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass+'[data-swiper-slide-index="'+b.realIndex+'"]').addClass(b.params.slideDuplicateActiveClass));var n=t.next("."+b.params.slideClass).addClass(b.params.slideNextClass);b.params.loop&&0===n.length&&(n=b.slides.eq(0)).addClass(b.params.slideNextClass);var a=t.prev("."+b.params.slideClass).addClass(b.params.slidePrevClass);if(b.params.loop&&0===a.length&&(a=b.slides.eq(-1)).addClass(b.params.slidePrevClass),r.loop&&(n.hasClass(b.params.slideDuplicateClass)?b.wrapper.children("."+b.params.slideClass+":not(."+b.params.slideDuplicateClass+')[data-swiper-slide-index="'+n.attr("data-swiper-slide-index")+'"]').addClass(b.params.slideDuplicateNextClass):b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass+'[data-swiper-slide-index="'+n.attr("data-swiper-slide-index")+'"]').addClass(b.params.slideDuplicateNextClass),a.hasClass(b.params.slideDuplicateClass)?b.wrapper.children("."+b.params.slideClass+":not(."+b.params.slideDuplicateClass+')[data-swiper-slide-index="'+a.attr("data-swiper-slide-index")+'"]').addClass(b.params.slideDuplicatePrevClass):b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass+'[data-swiper-slide-index="'+a.attr("data-swiper-slide-index")+'"]').addClass(b.params.slideDuplicatePrevClass)),b.paginationContainer&&b.paginationContainer.length>0){var i,s=b.params.loop?Math.ceil((b.slides.length-2*b.loopedSlides)/b.params.slidesPerGroup):b.snapGrid.length;if(b.params.loop?((i=Math.ceil((b.activeIndex-b.loopedSlides)/b.params.slidesPerGroup))>b.slides.length-1-2*b.loopedSlides&&(i-=b.slides.length-2*b.loopedSlides),i>s-1&&(i-=s),i<0&&"bullets"!==b.params.paginationType&&(i=s+i)):i=void 0!==b.snapIndex?b.snapIndex:b.activeIndex||0,"bullets"===b.params.paginationType&&b.bullets&&b.bullets.length>0&&(b.bullets.removeClass(b.params.bulletActiveClass),b.paginationContainer.length>1?b.bullets.each(function(){e(this).index()===i&&e(this).addClass(b.params.bulletActiveClass)}):b.bullets.eq(i).addClass(b.params.bulletActiveClass)),"fraction"===b.params.paginationType&&(b.paginationContainer.find("."+b.params.paginationCurrentClass).text(i+1),b.paginationContainer.find("."+b.params.paginationTotalClass).text(s)),"progress"===b.params.paginationType){var o=(i+1)/s,l=o,u=1;b.isHorizontal()||(u=o,l=1),b.paginationContainer.find("."+b.params.paginationProgressbarClass).transform("translate3d(0,0,0) scaleX("+l+") scaleY("+u+")").transition(b.params.speed)}"custom"===b.params.paginationType&&b.params.paginationCustomRender&&(b.paginationContainer.html(b.params.paginationCustomRender(b,i+1,s)),b.emit("onPaginationRendered",b,b.paginationContainer[0]))}b.params.loop||(b.params.prevButton&&b.prevButton&&b.prevButton.length>0&&(b.isBeginning?(b.prevButton.addClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.disable(b.prevButton)):(b.prevButton.removeClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.enable(b.prevButton))),b.params.nextButton&&b.nextButton&&b.nextButton.length>0&&(b.isEnd?(b.nextButton.addClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.disable(b.nextButton)):(b.nextButton.removeClass(b.params.buttonDisabledClass),b.params.a11y&&b.a11y&&b.a11y.enable(b.nextButton))))},b.updatePagination=function(){if(b.params.pagination&&b.paginationContainer&&b.paginationContainer.length>0){var e="";if("bullets"===b.params.paginationType){for(var t=b.params.loop?Math.ceil((b.slides.length-2*b.loopedSlides)/b.params.slidesPerGroup):b.snapGrid.length,n=0;n<t;n++)b.params.paginationBulletRender?e+=b.params.paginationBulletRender(b,n,b.params.bulletClass):e+="<"+b.params.paginationElement+' class="'+b.params.bulletClass+'"></'+b.params.paginationElement+">";b.paginationContainer.html(e),b.bullets=b.paginationContainer.find("."+b.params.bulletClass),b.params.paginationClickable&&b.params.a11y&&b.a11y&&b.a11y.initPagination()}"fraction"===b.params.paginationType&&(e=b.params.paginationFractionRender?b.params.paginationFractionRender(b,b.params.paginationCurrentClass,b.params.paginationTotalClass):'<span class="'+b.params.paginationCurrentClass+'"></span> / <span class="'+b.params.paginationTotalClass+'"></span>',b.paginationContainer.html(e)),"progress"===b.params.paginationType&&(e=b.params.paginationProgressRender?b.params.paginationProgressRender(b,b.params.paginationProgressbarClass):'<span class="'+b.params.paginationProgressbarClass+'"></span>',b.paginationContainer.html(e)),"custom"!==b.params.paginationType&&b.emit("onPaginationRendered",b,b.paginationContainer[0])}},b.update=function(e){function t(){b.rtl,b.translate;n=Math.min(Math.max(b.translate,b.maxTranslate()),b.minTranslate()),b.setWrapperTranslate(n),b.updateActiveIndex(),b.updateClasses()}if(b){b.updateContainerSize(),b.updateSlidesSize(),b.updateProgress(),b.updatePagination(),b.updateClasses(),b.params.scrollbar&&b.scrollbar&&b.scrollbar.set();var n;if(e){b.controller&&b.controller.spline&&(b.controller.spline=void 0),b.params.freeMode?(t(),b.params.autoHeight&&b.updateAutoHeight()):(("auto"===b.params.slidesPerView||b.params.slidesPerView>1)&&b.isEnd&&!b.params.centeredSlides?b.slideTo(b.slides.length-1,0,!1,!0):b.slideTo(b.activeIndex,0,!1,!0))||t()}else b.params.autoHeight&&b.updateAutoHeight()}},b.onResize=function(e){b.params.onBeforeResize&&b.params.onBeforeResize(b),b.params.breakpoints&&b.setBreakpoint();var t=b.params.allowSwipeToPrev,n=b.params.allowSwipeToNext;b.params.allowSwipeToPrev=b.params.allowSwipeToNext=!0,b.updateContainerSize(),b.updateSlidesSize(),("auto"===b.params.slidesPerView||b.params.freeMode||e)&&b.updatePagination(),b.params.scrollbar&&b.scrollbar&&b.scrollbar.set(),b.controller&&b.controller.spline&&(b.controller.spline=void 0);var a=!1;if(b.params.freeMode){var r=Math.min(Math.max(b.translate,b.maxTranslate()),b.minTranslate());b.setWrapperTranslate(r),b.updateActiveIndex(),b.updateClasses(),b.params.autoHeight&&b.updateAutoHeight()}else b.updateClasses(),a=("auto"===b.params.slidesPerView||b.params.slidesPerView>1)&&b.isEnd&&!b.params.centeredSlides?b.slideTo(b.slides.length-1,0,!1,!0):b.slideTo(b.activeIndex,0,!1,!0);b.params.lazyLoading&&!a&&b.lazy&&b.lazy.load(),b.params.allowSwipeToPrev=t,b.params.allowSwipeToNext=n,b.params.onAfterResize&&b.params.onAfterResize(b)},b.touchEventsDesktop={start:"mousedown",move:"mousemove",end:"mouseup"},window.navigator.pointerEnabled?b.touchEventsDesktop={start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled&&(b.touchEventsDesktop={start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}),b.touchEvents={start:b.support.touch||!b.params.simulateTouch?"touchstart":b.touchEventsDesktop.start,move:b.support.touch||!b.params.simulateTouch?"touchmove":b.touchEventsDesktop.move,end:b.support.touch||!b.params.simulateTouch?"touchend":b.touchEventsDesktop.end},(window.navigator.pointerEnabled||window.navigator.msPointerEnabled)&&("container"===b.params.touchEventsTarget?b.container:b.wrapper).addClass("swiper-wp8-"+b.params.direction),b.initEvents=function(e){var t=e?"off":"on",n=e?"removeEventListener":"addEventListener",a="container"===b.params.touchEventsTarget?b.container[0]:b.wrapper[0],i=b.support.touch?a:document,s=!!b.params.nested;if(b.browser.ie)a[n](b.touchEvents.start,b.onTouchStart,!1),i[n](b.touchEvents.move,b.onTouchMove,s),i[n](b.touchEvents.end,b.onTouchEnd,!1);else{if(b.support.touch){var o=!("touchstart"!==b.touchEvents.start||!b.support.passiveListener||!b.params.passiveListeners)&&{passive:!0,capture:!1};a[n](b.touchEvents.start,b.onTouchStart,o),a[n](b.touchEvents.move,b.onTouchMove,s),a[n](b.touchEvents.end,b.onTouchEnd,o)}(r.simulateTouch&&!b.device.ios&&!b.device.android||r.simulateTouch&&!b.support.touch&&b.device.ios)&&(a[n]("mousedown",b.onTouchStart,!1),document[n]("mousemove",b.onTouchMove,s),document[n]("mouseup",b.onTouchEnd,!1))}window[n]("resize",b.onResize),b.params.nextButton&&b.nextButton&&b.nextButton.length>0&&(b.nextButton[t]("click",b.onClickNext),b.params.a11y&&b.a11y&&b.nextButton[t]("keydown",b.a11y.onEnterKey)),b.params.prevButton&&b.prevButton&&b.prevButton.length>0&&(b.prevButton[t]("click",b.onClickPrev),b.params.a11y&&b.a11y&&b.prevButton[t]("keydown",b.a11y.onEnterKey)),b.params.pagination&&b.params.paginationClickable&&(b.paginationContainer[t]("click","."+b.params.bulletClass,b.onClickIndex),b.params.a11y&&b.a11y&&b.paginationContainer[t]("keydown","."+b.params.bulletClass,b.a11y.onEnterKey)),(b.params.preventClicks||b.params.preventClicksPropagation)&&a[n]("click",b.preventClicks,!0)},b.attachEvents=function(){b.initEvents()},b.detachEvents=function(){b.initEvents(!0)},b.allowClick=!0,b.preventClicks=function(e){b.allowClick||(b.params.preventClicks&&e.preventDefault(),b.params.preventClicksPropagation&&b.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))},b.onClickNext=function(e){e.preventDefault(),b.isEnd&&!b.params.loop||b.slideNext()},b.onClickPrev=function(e){e.preventDefault(),b.isBeginning&&!b.params.loop||b.slidePrev()},b.onClickIndex=function(t){t.preventDefault();var n=e(this).index()*b.params.slidesPerGroup;b.params.loop&&(n+=b.loopedSlides),b.slideTo(n)},b.updateClickedSlide=function(t){var n=o(t,"."+b.params.slideClass),a=!1;if(n)for(var r=0;r<b.slides.length;r++)b.slides[r]===n&&(a=!0);if(!n||!a)return b.clickedSlide=void 0,void(b.clickedIndex=void 0);if(b.clickedSlide=n,b.clickedIndex=e(n).index(),b.params.slideToClickedSlide&&void 0!==b.clickedIndex&&b.clickedIndex!==b.activeIndex){var i,s=b.clickedIndex,l="auto"===b.params.slidesPerView?b.currentSlidesPerView():b.params.slidesPerView;if(b.params.loop){if(b.animating)return;i=parseInt(e(b.clickedSlide).attr("data-swiper-slide-index"),10),b.params.centeredSlides?s<b.loopedSlides-l/2||s>b.slides.length-b.loopedSlides+l/2?(b.fixLoop(),s=b.wrapper.children("."+b.params.slideClass+'[data-swiper-slide-index="'+i+'"]:not(.'+b.params.slideDuplicateClass+")").eq(0).index(),setTimeout(function(){b.slideTo(s)},0)):b.slideTo(s):s>b.slides.length-l?(b.fixLoop(),s=b.wrapper.children("."+b.params.slideClass+'[data-swiper-slide-index="'+i+'"]:not(.'+b.params.slideDuplicateClass+")").eq(0).index(),setTimeout(function(){b.slideTo(s)},0)):b.slideTo(s)}else b.slideTo(s)}};var C,S,E,M,k,z,D,P,L,I,A="input, select, textarea, button, video",N=Date.now(),H=[];b.animating=!1,b.touches={startX:0,startY:0,currentX:0,currentY:0,diff:0};var B,O;b.onTouchStart=function(t){if(t.originalEvent&&(t=t.originalEvent),(B="touchstart"===t.type)||!("which"in t)||3!==t.which)if(b.params.noSwiping&&o(t,"."+b.params.noSwipingClass))b.allowClick=!0;else if(!b.params.swipeHandler||o(t,b.params.swipeHandler)){var n=b.touches.currentX="touchstart"===t.type?t.targetTouches[0].pageX:t.pageX,a=b.touches.currentY="touchstart"===t.type?t.targetTouches[0].pageY:t.pageY;if(!(b.device.ios&&b.params.iOSEdgeSwipeDetection&&n<=b.params.iOSEdgeSwipeThreshold)){if(C=!0,S=!1,E=!0,k=void 0,O=void 0,b.touches.startX=n,b.touches.startY=a,M=Date.now(),b.allowClick=!0,b.updateContainerSize(),b.swipeDirection=void 0,b.params.threshold>0&&(P=!1),"touchstart"!==t.type){var r=!0;e(t.target).is(A)&&(r=!1),document.activeElement&&e(document.activeElement).is(A)&&document.activeElement.blur(),r&&t.preventDefault()}b.emit("onTouchStart",b,t)}}},b.onTouchMove=function(t){if(t.originalEvent&&(t=t.originalEvent),!B||"mousemove"!==t.type){if(t.preventedByNestedSwiper)return b.touches.startX="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,void(b.touches.startY="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY);if(b.params.onlyExternal)return b.allowClick=!1,void(C&&(b.touches.startX=b.touches.currentX="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,b.touches.startY=b.touches.currentY="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY,M=Date.now()));if(B&&b.params.touchReleaseOnEdges&&!b.params.loop)if(b.isHorizontal()){if(b.touches.currentX<b.touches.startX&&b.translate<=b.maxTranslate()||b.touches.currentX>b.touches.startX&&b.translate>=b.minTranslate())return}else if(b.touches.currentY<b.touches.startY&&b.translate<=b.maxTranslate()||b.touches.currentY>b.touches.startY&&b.translate>=b.minTranslate())return;if(B&&document.activeElement&&t.target===document.activeElement&&e(t.target).is(A))return S=!0,void(b.allowClick=!1);if(E&&b.emit("onTouchMove",b,t),!(t.targetTouches&&t.targetTouches.length>1)){if(b.touches.currentX="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,b.touches.currentY="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY,void 0===k){var n;b.isHorizontal()&&b.touches.currentY===b.touches.startY||!b.isHorizontal()&&b.touches.currentX===b.touches.startX?k=!1:(n=180*Math.atan2(Math.abs(b.touches.currentY-b.touches.startY),Math.abs(b.touches.currentX-b.touches.startX))/Math.PI,k=b.isHorizontal()?n>b.params.touchAngle:90-n>b.params.touchAngle)}if(k&&b.emit("onTouchMoveOpposite",b,t),void 0===O&&(b.touches.currentX===b.touches.startX&&b.touches.currentY===b.touches.startY||(O=!0)),C)if(k)C=!1;else if(O){b.allowClick=!1,b.emit("onSliderMove",b,t),t.preventDefault(),b.params.touchMoveStopPropagation&&!b.params.nested&&t.stopPropagation(),S||(r.loop&&b.fixLoop(),D=b.getWrapperTranslate(),b.setWrapperTransition(0),b.animating&&b.wrapper.trigger("webkitTransitionEnd transitionend oTransitionEnd MSTransitionEnd msTransitionEnd"),b.params.autoplay&&b.autoplaying&&(b.params.autoplayDisableOnInteraction?b.stopAutoplay():b.pauseAutoplay()),I=!1,!b.params.grabCursor||!0!==b.params.allowSwipeToNext&&!0!==b.params.allowSwipeToPrev||b.setGrabCursor(!0)),S=!0;var a=b.touches.diff=b.isHorizontal()?b.touches.currentX-b.touches.startX:b.touches.currentY-b.touches.startY;a*=b.params.touchRatio,b.rtl&&(a=-a),b.swipeDirection=a>0?"prev":"next",z=a+D;var i=!0;if(a>0&&z>b.minTranslate()?(i=!1,b.params.resistance&&(z=b.minTranslate()-1+Math.pow(-b.minTranslate()+D+a,b.params.resistanceRatio))):a<0&&z<b.maxTranslate()&&(i=!1,b.params.resistance&&(z=b.maxTranslate()+1-Math.pow(b.maxTranslate()-D-a,b.params.resistanceRatio))),i&&(t.preventedByNestedSwiper=!0),!b.params.allowSwipeToNext&&"next"===b.swipeDirection&&z<D&&(z=D),!b.params.allowSwipeToPrev&&"prev"===b.swipeDirection&&z>D&&(z=D),b.params.threshold>0){if(!(Math.abs(a)>b.params.threshold||P))return void(z=D);if(!P)return P=!0,b.touches.startX=b.touches.currentX,b.touches.startY=b.touches.currentY,z=D,void(b.touches.diff=b.isHorizontal()?b.touches.currentX-b.touches.startX:b.touches.currentY-b.touches.startY)}b.params.followFinger&&((b.params.freeMode||b.params.watchSlidesProgress)&&b.updateActiveIndex(),b.params.freeMode&&(0===H.length&&H.push({position:b.touches[b.isHorizontal()?"startX":"startY"],time:M}),H.push({position:b.touches[b.isHorizontal()?"currentX":"currentY"],time:(new window.Date).getTime()})),b.updateProgress(z),b.setWrapperTranslate(z))}}}},b.onTouchEnd=function(t){if(t.originalEvent&&(t=t.originalEvent),E&&b.emit("onTouchEnd",b,t),E=!1,C){b.params.grabCursor&&S&&C&&(!0===b.params.allowSwipeToNext||!0===b.params.allowSwipeToPrev)&&b.setGrabCursor(!1);var n=Date.now(),a=n-M;if(b.allowClick&&(b.updateClickedSlide(t),b.emit("onTap",b,t),a<300&&n-N>300&&(L&&clearTimeout(L),L=setTimeout(function(){b&&(b.params.paginationHide&&b.paginationContainer.length>0&&!e(t.target).hasClass(b.params.bulletClass)&&b.paginationContainer.toggleClass(b.params.paginationHiddenClass),b.emit("onClick",b,t))},300)),a<300&&n-N<300&&(L&&clearTimeout(L),b.emit("onDoubleTap",b,t))),N=Date.now(),setTimeout(function(){b&&(b.allowClick=!0)},0),C&&S&&b.swipeDirection&&0!==b.touches.diff&&z!==D){C=S=!1;var r;if(r=b.params.followFinger?b.rtl?b.translate:-b.translate:-z,b.params.freeMode){if(r<-b.minTranslate())return void b.slideTo(b.activeIndex);if(r>-b.maxTranslate())return void(b.slides.length<b.snapGrid.length?b.slideTo(b.snapGrid.length-1):b.slideTo(b.slides.length-1));if(b.params.freeModeMomentum){if(H.length>1){var i=H.pop(),s=H.pop(),o=i.position-s.position,l=i.time-s.time;b.velocity=o/l,b.velocity=b.velocity/2,Math.abs(b.velocity)<b.params.freeModeMinimumVelocity&&(b.velocity=0),(l>150||(new window.Date).getTime()-i.time>300)&&(b.velocity=0)}else b.velocity=0;b.velocity=b.velocity*b.params.freeModeMomentumVelocityRatio,H.length=0;var u=1e3*b.params.freeModeMomentumRatio,p=b.velocity*u,d=b.translate+p;b.rtl&&(d=-d);var c,f=!1,h=20*Math.abs(b.velocity)*b.params.freeModeMomentumBounceRatio;if(d<b.maxTranslate())b.params.freeModeMomentumBounce?(d+b.maxTranslate()<-h&&(d=b.maxTranslate()-h),c=b.maxTranslate(),f=!0,I=!0):d=b.maxTranslate();else if(d>b.minTranslate())b.params.freeModeMomentumBounce?(d-b.minTranslate()>h&&(d=b.minTranslate()+h),c=b.minTranslate(),f=!0,I=!0):d=b.minTranslate();else if(b.params.freeModeSticky){var m,g=0;for(g=0;g<b.snapGrid.length;g+=1)if(b.snapGrid[g]>-d){m=g;break}d=Math.abs(b.snapGrid[m]-d)<Math.abs(b.snapGrid[m-1]-d)||"next"===b.swipeDirection?b.snapGrid[m]:b.snapGrid[m-1],b.rtl||(d=-d)}if(0!==b.velocity)u=b.rtl?Math.abs((-d-b.translate)/b.velocity):Math.abs((d-b.translate)/b.velocity);else if(b.params.freeModeSticky)return void b.slideReset();b.params.freeModeMomentumBounce&&f?(b.updateProgress(c),b.setWrapperTransition(u),b.setWrapperTranslate(d),b.onTransitionStart(),b.animating=!0,b.wrapper.transitionEnd(function(){b&&I&&(b.emit("onMomentumBounce",b),b.setWrapperTransition(b.params.speed),b.setWrapperTranslate(c),b.wrapper.transitionEnd(function(){b&&b.onTransitionEnd()}))})):b.velocity?(b.updateProgress(d),b.setWrapperTransition(u),b.setWrapperTranslate(d),b.onTransitionStart(),b.animating||(b.animating=!0,b.wrapper.transitionEnd(function(){b&&b.onTransitionEnd()}))):b.updateProgress(d),b.updateActiveIndex()}(!b.params.freeModeMomentum||a>=b.params.longSwipesMs)&&(b.updateProgress(),b.updateActiveIndex())}else{var v,y=0,w=b.slidesSizesGrid[0];for(v=0;v<b.slidesGrid.length;v+=b.params.slidesPerGroup)void 0!==b.slidesGrid[v+b.params.slidesPerGroup]?r>=b.slidesGrid[v]&&r<b.slidesGrid[v+b.params.slidesPerGroup]&&(y=v,w=b.slidesGrid[v+b.params.slidesPerGroup]-b.slidesGrid[v]):r>=b.slidesGrid[v]&&(y=v,w=b.slidesGrid[b.slidesGrid.length-1]-b.slidesGrid[b.slidesGrid.length-2]);var x=(r-b.slidesGrid[y])/w;if(a>b.params.longSwipesMs){if(!b.params.longSwipes)return void b.slideTo(b.activeIndex);"next"===b.swipeDirection&&(x>=b.params.longSwipesRatio?b.slideTo(y+b.params.slidesPerGroup):b.slideTo(y)),"prev"===b.swipeDirection&&(x>1-b.params.longSwipesRatio?b.slideTo(y+b.params.slidesPerGroup):b.slideTo(y))}else{if(!b.params.shortSwipes)return void b.slideTo(b.activeIndex);"next"===b.swipeDirection&&b.slideTo(y+b.params.slidesPerGroup),"prev"===b.swipeDirection&&b.slideTo(y)}}}else C=S=!1}},b._slideTo=function(e,t){return b.slideTo(e,t,!0,!0)},b.slideTo=function(e,t,n,a){void 0===n&&(n=!0),void 0===e&&(e=0),e<0&&(e=0),b.snapIndex=Math.floor(e/b.params.slidesPerGroup),b.snapIndex>=b.snapGrid.length&&(b.snapIndex=b.snapGrid.length-1);var r=-b.snapGrid[b.snapIndex];if(b.params.autoplay&&b.autoplaying&&(a||!b.params.autoplayDisableOnInteraction?b.pauseAutoplay(t):b.stopAutoplay()),b.updateProgress(r),b.params.normalizeSlideIndex)for(var i=0;i<b.slidesGrid.length;i++)-Math.floor(100*r)>=Math.floor(100*b.slidesGrid[i])&&(e=i);return!(!b.params.allowSwipeToNext&&r<b.translate&&r<b.minTranslate())&&(!(!b.params.allowSwipeToPrev&&r>b.translate&&r>b.maxTranslate()&&(b.activeIndex||0)!==e)&&(void 0===t&&(t=b.params.speed),b.previousIndex=b.activeIndex||0,b.activeIndex=e,b.updateRealIndex(),b.rtl&&-r===b.translate||!b.rtl&&r===b.translate?(b.params.autoHeight&&b.updateAutoHeight(),b.updateClasses(),"slide"!==b.params.effect&&b.setWrapperTranslate(r),!1):(b.updateClasses(),b.onTransitionStart(n),0===t||b.browser.lteIE9?(b.setWrapperTranslate(r),b.setWrapperTransition(0),b.onTransitionEnd(n)):(b.setWrapperTranslate(r),b.setWrapperTransition(t),b.animating||(b.animating=!0,b.wrapper.transitionEnd(function(){b&&b.onTransitionEnd(n)}))),!0)))},b.onTransitionStart=function(e){void 0===e&&(e=!0),b.params.autoHeight&&b.updateAutoHeight(),b.lazy&&b.lazy.onTransitionStart(),e&&(b.emit("onTransitionStart",b),b.activeIndex!==b.previousIndex&&(b.emit("onSlideChangeStart",b),b.activeIndex>b.previousIndex?b.emit("onSlideNextStart",b):b.emit("onSlidePrevStart",b)))},b.onTransitionEnd=function(e){b.animating=!1,b.setWrapperTransition(0),void 0===e&&(e=!0),b.lazy&&b.lazy.onTransitionEnd(),e&&(b.emit("onTransitionEnd",b),b.activeIndex!==b.previousIndex&&(b.emit("onSlideChangeEnd",b),b.activeIndex>b.previousIndex?b.emit("onSlideNextEnd",b):b.emit("onSlidePrevEnd",b))),b.params.history&&b.history&&b.history.setHistory(b.params.history,b.activeIndex),b.params.hashnav&&b.hashnav&&b.hashnav.setHash()},b.slideNext=function(e,t,n){if(b.params.loop){if(b.animating)return!1;b.fixLoop();b.container[0].clientLeft;return b.slideTo(b.activeIndex+b.params.slidesPerGroup,t,e,n)}return b.slideTo(b.activeIndex+b.params.slidesPerGroup,t,e,n)},b._slideNext=function(e){return b.slideNext(!0,e,!0)},b.slidePrev=function(e,t,n){if(b.params.loop){if(b.animating)return!1;b.fixLoop();b.container[0].clientLeft;return b.slideTo(b.activeIndex-1,t,e,n)}return b.slideTo(b.activeIndex-1,t,e,n)},b._slidePrev=function(e){return b.slidePrev(!0,e,!0)},b.slideReset=function(e,t,n){return b.slideTo(b.activeIndex,t,e)},b.disableTouchControl=function(){return b.params.onlyExternal=!0,!0},b.enableTouchControl=function(){return b.params.onlyExternal=!1,!0},b.setWrapperTransition=function(e,t){b.wrapper.transition(e),"slide"!==b.params.effect&&b.effects[b.params.effect]&&b.effects[b.params.effect].setTransition(e),b.params.parallax&&b.parallax&&b.parallax.setTransition(e),b.params.scrollbar&&b.scrollbar&&b.scrollbar.setTransition(e),b.params.control&&b.controller&&b.controller.setTransition(e,t),b.emit("onSetTransition",b,e)},b.setWrapperTranslate=function(e,t,n){var a=0,r=0;b.isHorizontal()?a=b.rtl?-e:e:r=e,b.params.roundLengths&&(a=i(a),r=i(r)),b.params.virtualTranslate||(b.support.transforms3d?b.wrapper.transform("translate3d("+a+"px, "+r+"px, 0px)"):b.wrapper.transform("translate("+a+"px, "+r+"px)")),b.translate=b.isHorizontal()?a:r;var s=b.maxTranslate()-b.minTranslate();(0===s?0:(e-b.minTranslate())/s)!==b.progress&&b.updateProgress(e),t&&b.updateActiveIndex(),"slide"!==b.params.effect&&b.effects[b.params.effect]&&b.effects[b.params.effect].setTranslate(b.translate),b.params.parallax&&b.parallax&&b.parallax.setTranslate(b.translate),b.params.scrollbar&&b.scrollbar&&b.scrollbar.setTranslate(b.translate),b.params.control&&b.controller&&b.controller.setTranslate(b.translate,n),b.emit("onSetTranslate",b,b.translate)},b.getTranslate=function(e,t){var n,a,r,i;return void 0===t&&(t="x"),b.params.virtualTranslate?b.rtl?-b.translate:b.translate:(r=window.getComputedStyle(e,null),window.WebKitCSSMatrix?((a=r.transform||r.webkitTransform).split(",").length>6&&(a=a.split(", ").map(function(e){return e.replace(",",".")}).join(", ")),i=new window.WebKitCSSMatrix("none"===a?"":a)):n=(i=r.MozTransform||r.OTransform||r.MsTransform||r.msTransform||r.transform||r.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(a=window.WebKitCSSMatrix?i.m41:16===n.length?parseFloat(n[12]):parseFloat(n[4])),"y"===t&&(a=window.WebKitCSSMatrix?i.m42:16===n.length?parseFloat(n[13]):parseFloat(n[5])),b.rtl&&a&&(a=-a),a||0)},b.getWrapperTranslate=function(e){return void 0===e&&(e=b.isHorizontal()?"x":"y"),b.getTranslate(b.wrapper[0],e)},b.observers=[],b.initObservers=function(){if(b.params.observeParents)for(var e=b.container.parents(),t=0;t<e.length;t++)l(e[t]);l(b.container[0],{childList:!1}),l(b.wrapper[0],{attributes:!1})},b.disconnectObservers=function(){for(var e=0;e<b.observers.length;e++)b.observers[e].disconnect();b.observers=[]},b.createLoop=function(){b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass).remove();var t=b.wrapper.children("."+b.params.slideClass);"auto"!==b.params.slidesPerView||b.params.loopedSlides||(b.params.loopedSlides=t.length),b.loopedSlides=parseInt(b.params.loopedSlides||b.params.slidesPerView,10),b.loopedSlides=b.loopedSlides+b.params.loopAdditionalSlides,b.loopedSlides>t.length&&(b.loopedSlides=t.length);var n,a=[],r=[];for(t.each(function(n,i){var s=e(this);n<b.loopedSlides&&r.push(i),n<t.length&&n>=t.length-b.loopedSlides&&a.push(i),s.attr("data-swiper-slide-index",n)}),n=0;n<r.length;n++)b.wrapper.append(e(r[n].cloneNode(!0)).addClass(b.params.slideDuplicateClass));for(n=a.length-1;n>=0;n--)b.wrapper.prepend(e(a[n].cloneNode(!0)).addClass(b.params.slideDuplicateClass))},b.destroyLoop=function(){b.wrapper.children("."+b.params.slideClass+"."+b.params.slideDuplicateClass).remove(),b.slides.removeAttr("data-swiper-slide-index")},b.reLoop=function(e){var t=b.activeIndex-b.loopedSlides;b.destroyLoop(),b.createLoop(),b.updateSlidesSize(),e&&b.slideTo(t+b.loopedSlides,0,!1)},b.fixLoop=function(){var e;b.activeIndex<b.loopedSlides?(e=b.slides.length-3*b.loopedSlides+b.activeIndex,e+=b.loopedSlides,b.slideTo(e,0,!1,!0)):("auto"===b.params.slidesPerView&&b.activeIndex>=2*b.loopedSlides||b.activeIndex>b.slides.length-2*b.params.slidesPerView)&&(e=-b.slides.length+b.activeIndex+b.loopedSlides,e+=b.loopedSlides,b.slideTo(e,0,!1,!0))},b.appendSlide=function(e){if(b.params.loop&&b.destroyLoop(),"object"==typeof e&&e.length)for(var t=0;t<e.length;t++)e[t]&&b.wrapper.append(e[t]);else b.wrapper.append(e);b.params.loop&&b.createLoop(),b.params.observer&&b.support.observer||b.update(!0)},b.prependSlide=function(e){b.params.loop&&b.destroyLoop();var t=b.activeIndex+1;if("object"==typeof e&&e.length){for(var n=0;n<e.length;n++)e[n]&&b.wrapper.prepend(e[n]);t=b.activeIndex+e.length}else b.wrapper.prepend(e);b.params.loop&&b.createLoop(),b.params.observer&&b.support.observer||b.update(!0),b.slideTo(t,0,!1)},b.removeSlide=function(e){b.params.loop&&(b.destroyLoop(),b.slides=b.wrapper.children("."+b.params.slideClass));var t,n=b.activeIndex;if("object"==typeof e&&e.length){for(var a=0;a<e.length;a++)t=e[a],b.slides[t]&&b.slides.eq(t).remove(),t<n&&n--;n=Math.max(n,0)}else t=e,b.slides[t]&&b.slides.eq(t).remove(),t<n&&n--,n=Math.max(n,0);b.params.loop&&b.createLoop(),b.params.observer&&b.support.observer||b.update(!0),b.params.loop?b.slideTo(n+b.loopedSlides,0,!1):b.slideTo(n,0,!1)},b.removeAllSlides=function(){for(var e=[],t=0;t<b.slides.length;t++)e.push(t);b.removeSlide(e)},b.effects={fade:{setTranslate:function(){for(var e=0;e<b.slides.length;e++){var t=b.slides.eq(e),n=-t[0].swiperSlideOffset;b.params.virtualTranslate||(n-=b.translate);var a=0;b.isHorizontal()||(a=n,n=0);var r=b.params.fade.crossFade?Math.max(1-Math.abs(t[0].progress),0):1+Math.min(Math.max(t[0].progress,-1),0);t.css({opacity:r}).transform("translate3d("+n+"px, "+a+"px, 0px)")}},setTransition:function(e){if(b.slides.transition(e),b.params.virtualTranslate&&0!==e){var t=!1;b.slides.transitionEnd(function(){if(!t&&b){t=!0,b.animating=!1;for(var e=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],n=0;n<e.length;n++)b.wrapper.trigger(e[n])}})}}},flip:{setTranslate:function(){for(var t=0;t<b.slides.length;t++){var n=b.slides.eq(t),a=n[0].progress;b.params.flip.limitRotation&&(a=Math.max(Math.min(n[0].progress,1),-1));var r=-180*a,i=0,s=-n[0].swiperSlideOffset,o=0;if(b.isHorizontal()?b.rtl&&(r=-r):(o=s,s=0,i=-r,r=0),n[0].style.zIndex=-Math.abs(Math.round(a))+b.slides.length,b.params.flip.slideShadows){var l=b.isHorizontal()?n.find(".swiper-slide-shadow-left"):n.find(".swiper-slide-shadow-top"),u=b.isHorizontal()?n.find(".swiper-slide-shadow-right"):n.find(".swiper-slide-shadow-bottom");0===l.length&&(l=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"left":"top")+'"></div>'),n.append(l)),0===u.length&&(u=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"right":"bottom")+'"></div>'),n.append(u)),l.length&&(l[0].style.opacity=Math.max(-a,0)),u.length&&(u[0].style.opacity=Math.max(a,0))}n.transform("translate3d("+s+"px, "+o+"px, 0px) rotateX("+i+"deg) rotateY("+r+"deg)")}},setTransition:function(t){if(b.slides.transition(t).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(t),b.params.virtualTranslate&&0!==t){var n=!1;b.slides.eq(b.activeIndex).transitionEnd(function(){if(!n&&b&&e(this).hasClass(b.params.slideActiveClass)){n=!0,b.animating=!1;for(var t=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],a=0;a<t.length;a++)b.wrapper.trigger(t[a])}})}}},cube:{setTranslate:function(){var t,n=0;b.params.cube.shadow&&(b.isHorizontal()?(0===(t=b.wrapper.find(".swiper-cube-shadow")).length&&(t=e('<div class="swiper-cube-shadow"></div>'),b.wrapper.append(t)),t.css({height:b.width+"px"})):0===(t=b.container.find(".swiper-cube-shadow")).length&&(t=e('<div class="swiper-cube-shadow"></div>'),b.container.append(t)));for(var a=0;a<b.slides.length;a++){var r=b.slides.eq(a),i=90*a,s=Math.floor(i/360);b.rtl&&(i=-i,s=Math.floor(-i/360));var o=Math.max(Math.min(r[0].progress,1),-1),l=0,u=0,p=0;a%4==0?(l=4*-s*b.size,p=0):(a-1)%4==0?(l=0,p=4*-s*b.size):(a-2)%4==0?(l=b.size+4*s*b.size,p=b.size):(a-3)%4==0&&(l=-b.size,p=3*b.size+4*b.size*s),b.rtl&&(l=-l),b.isHorizontal()||(u=l,l=0);var d="rotateX("+(b.isHorizontal()?0:-i)+"deg) rotateY("+(b.isHorizontal()?i:0)+"deg) translate3d("+l+"px, "+u+"px, "+p+"px)";if(o<=1&&o>-1&&(n=90*a+90*o,b.rtl&&(n=90*-a-90*o)),r.transform(d),b.params.cube.slideShadows){var c=b.isHorizontal()?r.find(".swiper-slide-shadow-left"):r.find(".swiper-slide-shadow-top"),f=b.isHorizontal()?r.find(".swiper-slide-shadow-right"):r.find(".swiper-slide-shadow-bottom");0===c.length&&(c=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"left":"top")+'"></div>'),r.append(c)),0===f.length&&(f=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"right":"bottom")+'"></div>'),r.append(f)),c.length&&(c[0].style.opacity=Math.max(-o,0)),f.length&&(f[0].style.opacity=Math.max(o,0))}}if(b.wrapper.css({"-webkit-transform-origin":"50% 50% -"+b.size/2+"px","-moz-transform-origin":"50% 50% -"+b.size/2+"px","-ms-transform-origin":"50% 50% -"+b.size/2+"px","transform-origin":"50% 50% -"+b.size/2+"px"}),b.params.cube.shadow)if(b.isHorizontal())t.transform("translate3d(0px, "+(b.width/2+b.params.cube.shadowOffset)+"px, "+-b.width/2+"px) rotateX(90deg) rotateZ(0deg) scale("+b.params.cube.shadowScale+")");else{var h=Math.abs(n)-90*Math.floor(Math.abs(n)/90),m=1.5-(Math.sin(2*h*Math.PI/360)/2+Math.cos(2*h*Math.PI/360)/2),g=b.params.cube.shadowScale,v=b.params.cube.shadowScale/m,y=b.params.cube.shadowOffset;t.transform("scale3d("+g+", 1, "+v+") translate3d(0px, "+(b.height/2+y)+"px, "+-b.height/2/v+"px) rotateX(-90deg)")}var w=b.isSafari||b.isUiWebView?-b.size/2:0;b.wrapper.transform("translate3d(0px,0,"+w+"px) rotateX("+(b.isHorizontal()?0:n)+"deg) rotateY("+(b.isHorizontal()?-n:0)+"deg)")},setTransition:function(e){b.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),b.params.cube.shadow&&!b.isHorizontal()&&b.container.find(".swiper-cube-shadow").transition(e)}},coverflow:{setTranslate:function(){for(var t=b.translate,n=b.isHorizontal()?-t+b.width/2:-t+b.height/2,a=b.isHorizontal()?b.params.coverflow.rotate:-b.params.coverflow.rotate,r=b.params.coverflow.depth,i=0,s=b.slides.length;i<s;i++){var o=b.slides.eq(i),l=b.slidesSizesGrid[i],u=(n-o[0].swiperSlideOffset-l/2)/l*b.params.coverflow.modifier,p=b.isHorizontal()?a*u:0,d=b.isHorizontal()?0:a*u,c=-r*Math.abs(u),f=b.isHorizontal()?0:b.params.coverflow.stretch*u,h=b.isHorizontal()?b.params.coverflow.stretch*u:0;Math.abs(h)<.001&&(h=0),Math.abs(f)<.001&&(f=0),Math.abs(c)<.001&&(c=0),Math.abs(p)<.001&&(p=0),Math.abs(d)<.001&&(d=0);var m="translate3d("+h+"px,"+f+"px,"+c+"px)  rotateX("+d+"deg) rotateY("+p+"deg)";if(o.transform(m),o[0].style.zIndex=1-Math.abs(Math.round(u)),b.params.coverflow.slideShadows){var g=b.isHorizontal()?o.find(".swiper-slide-shadow-left"):o.find(".swiper-slide-shadow-top"),v=b.isHorizontal()?o.find(".swiper-slide-shadow-right"):o.find(".swiper-slide-shadow-bottom");0===g.length&&(g=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"left":"top")+'"></div>'),o.append(g)),0===v.length&&(v=e('<div class="swiper-slide-shadow-'+(b.isHorizontal()?"right":"bottom")+'"></div>'),o.append(v)),g.length&&(g[0].style.opacity=u>0?u:0),v.length&&(v[0].style.opacity=-u>0?-u:0)}}b.browser.ie&&(b.wrapper[0].style.perspectiveOrigin=n+"px 50%")},setTransition:function(e){b.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}}},b.lazy={initialImageLoaded:!1,loadImageInSlide:function(t,n){if(void 0!==t&&(void 0===n&&(n=!0),0!==b.slides.length)){var a=b.slides.eq(t),r=a.find("."+b.params.lazyLoadingClass+":not(."+b.params.lazyStatusLoadedClass+"):not(."+b.params.lazyStatusLoadingClass+")");!a.hasClass(b.params.lazyLoadingClass)||a.hasClass(b.params.lazyStatusLoadedClass)||a.hasClass(b.params.lazyStatusLoadingClass)||(r=r.add(a[0])),0!==r.length&&r.each(function(){var t=e(this);t.addClass(b.params.lazyStatusLoadingClass);var r=t.attr("data-background"),i=t.attr("data-src"),s=t.attr("data-srcset"),o=t.attr("data-sizes");b.loadImage(t[0],i||r,s,o,!1,function(){if(void 0!==b&&null!==b&&b){if(r?(t.css("background-image",'url("'+r+'")'),t.removeAttr("data-background")):(s&&(t.attr("srcset",s),t.removeAttr("data-srcset")),o&&(t.attr("sizes",o),t.removeAttr("data-sizes")),i&&(t.attr("src",i),t.removeAttr("data-src"))),t.addClass(b.params.lazyStatusLoadedClass).removeClass(b.params.lazyStatusLoadingClass),a.find("."+b.params.lazyPreloaderClass+", ."+b.params.preloaderClass).remove(),b.params.loop&&n){var e=a.attr("data-swiper-slide-index");if(a.hasClass(b.params.slideDuplicateClass)){var l=b.wrapper.children('[data-swiper-slide-index="'+e+'"]:not(.'+b.params.slideDuplicateClass+")");b.lazy.loadImageInSlide(l.index(),!1)}else{var u=b.wrapper.children("."+b.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]');b.lazy.loadImageInSlide(u.index(),!1)}}b.emit("onLazyImageReady",b,a[0],t[0])}}),b.emit("onLazyImageLoad",b,a[0],t[0])})}},load:function(){var t,n=b.params.slidesPerView;if("auto"===n&&(n=0),b.lazy.initialImageLoaded||(b.lazy.initialImageLoaded=!0),b.params.watchSlidesVisibility)b.wrapper.children("."+b.params.slideVisibleClass).each(function(){b.lazy.loadImageInSlide(e(this).index())});else if(n>1)for(t=b.activeIndex;t<b.activeIndex+n;t++)b.slides[t]&&b.lazy.loadImageInSlide(t);else b.lazy.loadImageInSlide(b.activeIndex);if(b.params.lazyLoadingInPrevNext)if(n>1||b.params.lazyLoadingInPrevNextAmount&&b.params.lazyLoadingInPrevNextAmount>1){var a=b.params.lazyLoadingInPrevNextAmount,r=n,i=Math.min(b.activeIndex+r+Math.max(a,r),b.slides.length),s=Math.max(b.activeIndex-Math.max(r,a),0);for(t=b.activeIndex+n;t<i;t++)b.slides[t]&&b.lazy.loadImageInSlide(t);for(t=s;t<b.activeIndex;t++)b.slides[t]&&b.lazy.loadImageInSlide(t)}else{var o=b.wrapper.children("."+b.params.slideNextClass);o.length>0&&b.lazy.loadImageInSlide(o.index());var l=b.wrapper.children("."+b.params.slidePrevClass);l.length>0&&b.lazy.loadImageInSlide(l.index())}},onTransitionStart:function(){b.params.lazyLoading&&(b.params.lazyLoadingOnTransitionStart||!b.params.lazyLoadingOnTransitionStart&&!b.lazy.initialImageLoaded)&&b.lazy.load()},onTransitionEnd:function(){b.params.lazyLoading&&!b.params.lazyLoadingOnTransitionStart&&b.lazy.load()}},b.scrollbar={isTouched:!1,setDragPosition:function(e){var t=b.scrollbar,n=(b.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageX:e.pageX||e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageY:e.pageY||e.clientY)-t.track.offset()[b.isHorizontal()?"left":"top"]-t.dragSize/2,a=-b.minTranslate()*t.moveDivider,r=-b.maxTranslate()*t.moveDivider;n<a?n=a:n>r&&(n=r),n=-n/t.moveDivider,b.updateProgress(n),b.setWrapperTranslate(n,!0)},dragStart:function(e){var t=b.scrollbar;t.isTouched=!0,e.preventDefault(),e.stopPropagation(),t.setDragPosition(e),clearTimeout(t.dragTimeout),t.track.transition(0),b.params.scrollbarHide&&t.track.css("opacity",1),b.wrapper.transition(100),t.drag.transition(100),b.emit("onScrollbarDragStart",b)},dragMove:function(e){var t=b.scrollbar;t.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),b.wrapper.transition(0),t.track.transition(0),t.drag.transition(0),b.emit("onScrollbarDragMove",b))},dragEnd:function(e){var t=b.scrollbar;t.isTouched&&(t.isTouched=!1,b.params.scrollbarHide&&(clearTimeout(t.dragTimeout),t.dragTimeout=setTimeout(function(){t.track.css("opacity",0),t.track.transition(400)},1e3)),b.emit("onScrollbarDragEnd",b),b.params.scrollbarSnapOnRelease&&b.slideReset())},draggableEvents:!1!==b.params.simulateTouch||b.support.touch?b.touchEvents:b.touchEventsDesktop,enableDraggable:function(){var t=b.scrollbar,n=b.support.touch?t.track:document;e(t.track).on(t.draggableEvents.start,t.dragStart),e(n).on(t.draggableEvents.move,t.dragMove),e(n).on(t.draggableEvents.end,t.dragEnd)},disableDraggable:function(){var t=b.scrollbar,n=b.support.touch?t.track:document;e(t.track).off(t.draggableEvents.start,t.dragStart),e(n).off(t.draggableEvents.move,t.dragMove),e(n).off(t.draggableEvents.end,t.dragEnd)},set:function(){if(b.params.scrollbar){var t=b.scrollbar;t.track=e(b.params.scrollbar),b.params.uniqueNavElements&&"string"==typeof b.params.scrollbar&&t.track.length>1&&1===b.container.find(b.params.scrollbar).length&&(t.track=b.container.find(b.params.scrollbar)),t.drag=t.track.find(".swiper-scrollbar-drag"),0===t.drag.length&&(t.drag=e('<div class="swiper-scrollbar-drag"></div>'),t.track.append(t.drag)),t.drag[0].style.width="",t.drag[0].style.height="",t.trackSize=b.isHorizontal()?t.track[0].offsetWidth:t.track[0].offsetHeight,t.divider=b.size/b.virtualSize,t.moveDivider=t.divider*(t.trackSize/b.size),t.dragSize=t.trackSize*t.divider,b.isHorizontal()?t.drag[0].style.width=t.dragSize+"px":t.drag[0].style.height=t.dragSize+"px",t.divider>=1?t.track[0].style.display="none":t.track[0].style.display="",b.params.scrollbarHide&&(t.track[0].style.opacity=0)}},setTranslate:function(){if(b.params.scrollbar){var e,t=b.scrollbar,n=(b.translate,t.dragSize);e=(t.trackSize-t.dragSize)*b.progress,b.rtl&&b.isHorizontal()?(e=-e)>0?(n=t.dragSize-e,e=0):-e+t.dragSize>t.trackSize&&(n=t.trackSize+e):e<0?(n=t.dragSize+e,e=0):e+t.dragSize>t.trackSize&&(n=t.trackSize-e),b.isHorizontal()?(b.support.transforms3d?t.drag.transform("translate3d("+e+"px, 0, 0)"):t.drag.transform("translateX("+e+"px)"),t.drag[0].style.width=n+"px"):(b.support.transforms3d?t.drag.transform("translate3d(0px, "+e+"px, 0)"):t.drag.transform("translateY("+e+"px)"),t.drag[0].style.height=n+"px"),b.params.scrollbarHide&&(clearTimeout(t.timeout),t.track[0].style.opacity=1,t.timeout=setTimeout(function(){t.track[0].style.opacity=0,t.track.transition(400)},1e3))}},setTransition:function(e){b.params.scrollbar&&b.scrollbar.drag.transition(e)}},b.controller={LinearSpline:function(e,t){var n=function(){var e,t,n;return function(a,r){for(t=-1,e=a.length;e-t>1;)a[n=e+t>>1]<=r?t=n:e=n;return e}}();this.x=e,this.y=t,this.lastIndex=e.length-1;var a,r;this.x.length;this.interpolate=function(e){return e?(r=n(this.x,e),a=r-1,(e-this.x[a])*(this.y[r]-this.y[a])/(this.x[r]-this.x[a])+this.y[a]):0}},getInterpolateFunction:function(e){b.controller.spline||(b.controller.spline=b.params.loop?new b.controller.LinearSpline(b.slidesGrid,e.slidesGrid):new b.controller.LinearSpline(b.snapGrid,e.snapGrid))},setTranslate:function(e,n){function a(t){e=t.rtl&&"horizontal"===t.params.direction?-b.translate:b.translate,"slide"===b.params.controlBy&&(b.controller.getInterpolateFunction(t),i=-b.controller.spline.interpolate(-e)),i&&"container"!==b.params.controlBy||(r=(t.maxTranslate()-t.minTranslate())/(b.maxTranslate()-b.minTranslate()),i=(e-b.minTranslate())*r+t.minTranslate()),b.params.controlInverse&&(i=t.maxTranslate()-i),t.updateProgress(i),t.setWrapperTranslate(i,!1,b),t.updateActiveIndex()}var r,i,s=b.params.control;if(Array.isArray(s))for(var o=0;o<s.length;o++)s[o]!==n&&s[o]instanceof t&&a(s[o]);else s instanceof t&&n!==s&&a(s)},setTransition:function(e,n){function a(t){t.setWrapperTransition(e,b),0!==e&&(t.onTransitionStart(),t.wrapper.transitionEnd(function(){i&&(t.params.loop&&"slide"===b.params.controlBy&&t.fixLoop(),t.onTransitionEnd())}))}var r,i=b.params.control;if(Array.isArray(i))for(r=0;r<i.length;r++)i[r]!==n&&i[r]instanceof t&&a(i[r]);else i instanceof t&&n!==i&&a(i)}},b.hashnav={onHashCange:function(e,t){var n=document.location.hash.replace("#","");n!==b.slides.eq(b.activeIndex).attr("data-hash")&&b.slideTo(b.wrapper.children("."+b.params.slideClass+'[data-hash="'+n+'"]').index())},attachEvents:function(t){var n=t?"off":"on";e(window)[n]("hashchange",b.hashnav.onHashCange)},setHash:function(){if(b.hashnav.initialized&&b.params.hashnav)if(b.params.replaceState&&window.history&&window.history.replaceState)window.history.replaceState(null,null,"#"+b.slides.eq(b.activeIndex).attr("data-hash")||"");else{var e=b.slides.eq(b.activeIndex),t=e.attr("data-hash")||e.attr("data-history");document.location.hash=t||""}},init:function(){if(b.params.hashnav&&!b.params.history){b.hashnav.initialized=!0;var e=document.location.hash.replace("#","");if(e)for(var t=0,n=b.slides.length;t<n;t++){var a=b.slides.eq(t);if((a.attr("data-hash")||a.attr("data-history"))===e&&!a.hasClass(b.params.slideDuplicateClass)){var r=a.index();b.slideTo(r,0,b.params.runCallbacksOnInit,!0)}}b.params.hashnavWatchState&&b.hashnav.attachEvents()}},destroy:function(){b.params.hashnavWatchState&&b.hashnav.attachEvents(!0)}},b.history={init:function(){if(b.params.history){if(!window.history||!window.history.pushState)return b.params.history=!1,void(b.params.hashnav=!0);b.history.initialized=!0,this.paths=this.getPathValues(),(this.paths.key||this.paths.value)&&(this.scrollToSlide(0,this.paths.value,b.params.runCallbacksOnInit),b.params.replaceState||window.addEventListener("popstate",this.setHistoryPopState))}},setHistoryPopState:function(){b.history.paths=b.history.getPathValues(),b.history.scrollToSlide(b.params.speed,b.history.paths.value,!1)},getPathValues:function(){var e=window.location.pathname.slice(1).split("/"),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory:function(e,t){if(b.history.initialized&&b.params.history){var n=b.slides.eq(t),a=this.slugify(n.attr("data-history"));window.location.pathname.includes(e)||(a=e+"/"+a),b.params.replaceState?window.history.replaceState(null,null,a):window.history.pushState(null,null,a)}},slugify:function(e){return e.toString().toLowerCase().replace(/\s+/g,"-").replace(/[^\w\-]+/g,"").replace(/\-\-+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,n){if(t)for(var a=0,r=b.slides.length;a<r;a++){var i=b.slides.eq(a);if(this.slugify(i.attr("data-history"))===t&&!i.hasClass(b.params.slideDuplicateClass)){var s=i.index();b.slideTo(s,e,n)}}else b.slideTo(0,e,n)}},b.disableKeyboardControl=function(){b.params.keyboardControl=!1,e(document).off("keydown",u)},b.enableKeyboardControl=function(){b.params.keyboardControl=!0,e(document).on("keydown",u)},b.mousewheel={event:!1,lastScrollTime:(new window.Date).getTime()},b.params.mousewheelControl&&(b.mousewheel.event=navigator.userAgent.indexOf("firefox")>-1?"DOMMouseScroll":function(){var e="onwheel"in document;if(!e){var t=document.createElement("div");t.setAttribute("onwheel","return;"),e="function"==typeof t.onwheel}return!e&&document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")&&(e=document.implementation.hasFeature("Events.wheel","3.0")),e}()?"wheel":"mousewheel"),b.disableMousewheelControl=function(){if(!b.mousewheel.event)return!1;var t=b.container;return"container"!==b.params.mousewheelEventsTarged&&(t=e(b.params.mousewheelEventsTarged)),t.off(b.mousewheel.event,d),b.params.mousewheelControl=!1,!0},b.enableMousewheelControl=function(){if(!b.mousewheel.event)return!1;var t=b.container;return"container"!==b.params.mousewheelEventsTarged&&(t=e(b.params.mousewheelEventsTarged)),t.on(b.mousewheel.event,d),b.params.mousewheelControl=!0,!0},b.parallax={setTranslate:function(){b.container.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){c(this,b.progress)}),b.slides.each(function(){var t=e(this);t.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){c(this,Math.min(Math.max(t[0].progress,-1),1))})})},setTransition:function(t){void 0===t&&(t=b.params.speed),b.container.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){var n=e(this),a=parseInt(n.attr("data-swiper-parallax-duration"),10)||t;0===t&&(a=0),n.transition(a)})}},b.zoom={scale:1,currentScale:1,isScaling:!1,gesture:{slide:void 0,slideWidth:void 0,slideHeight:void 0,image:void 0,imageWrap:void 0,zoomMax:b.params.zoomMax},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0},getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,n=e.targetTouches[0].pageY,a=e.targetTouches[1].pageX,r=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(a-t,2)+Math.pow(r-n,2))},onGestureStart:function(t){var n=b.zoom;if(!b.support.gestures){if("touchstart"!==t.type||"touchstart"===t.type&&t.targetTouches.length<2)return;n.gesture.scaleStart=n.getDistanceBetweenTouches(t)}n.gesture.slide&&n.gesture.slide.length||(n.gesture.slide=e(this),0===n.gesture.slide.length&&(n.gesture.slide=b.slides.eq(b.activeIndex)),n.gesture.image=n.gesture.slide.find("img, svg, canvas"),n.gesture.imageWrap=n.gesture.image.parent("."+b.params.zoomContainerClass),n.gesture.zoomMax=n.gesture.imageWrap.attr("data-swiper-zoom")||b.params.zoomMax,0!==n.gesture.imageWrap.length)?(n.gesture.image.transition(0),n.isScaling=!0):n.gesture.image=void 0},onGestureChange:function(e){var t=b.zoom;if(!b.support.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;t.gesture.scaleMove=t.getDistanceBetweenTouches(e)}t.gesture.image&&0!==t.gesture.image.length&&(b.support.gestures?t.scale=e.scale*t.currentScale:t.scale=t.gesture.scaleMove/t.gesture.scaleStart*t.currentScale,t.scale>t.gesture.zoomMax&&(t.scale=t.gesture.zoomMax-1+Math.pow(t.scale-t.gesture.zoomMax+1,.5)),t.scale<b.params.zoomMin&&(t.scale=b.params.zoomMin+1-Math.pow(b.params.zoomMin-t.scale+1,.5)),t.gesture.image.transform("translate3d(0,0,0) scale("+t.scale+")"))},onGestureEnd:function(e){var t=b.zoom;!b.support.gestures&&("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2)||t.gesture.image&&0!==t.gesture.image.length&&(t.scale=Math.max(Math.min(t.scale,t.gesture.zoomMax),b.params.zoomMin),t.gesture.image.transition(b.params.speed).transform("translate3d(0,0,0) scale("+t.scale+")"),t.currentScale=t.scale,t.isScaling=!1,1===t.scale&&(t.gesture.slide=void 0))},onTouchStart:function(e,t){var n=e.zoom;n.gesture.image&&0!==n.gesture.image.length&&(n.image.isTouched||("android"===e.device.os&&t.preventDefault(),n.image.isTouched=!0,n.image.touchesStart.x="touchstart"===t.type?t.targetTouches[0].pageX:t.pageX,n.image.touchesStart.y="touchstart"===t.type?t.targetTouches[0].pageY:t.pageY))},onTouchMove:function(e){var t=b.zoom;if(t.gesture.image&&0!==t.gesture.image.length&&(b.allowClick=!1,t.image.isTouched&&t.gesture.slide)){t.image.isMoved||(t.image.width=t.gesture.image[0].offsetWidth,t.image.height=t.gesture.image[0].offsetHeight,t.image.startX=b.getTranslate(t.gesture.imageWrap[0],"x")||0,t.image.startY=b.getTranslate(t.gesture.imageWrap[0],"y")||0,t.gesture.slideWidth=t.gesture.slide[0].offsetWidth,t.gesture.slideHeight=t.gesture.slide[0].offsetHeight,t.gesture.imageWrap.transition(0),b.rtl&&(t.image.startX=-t.image.startX),b.rtl&&(t.image.startY=-t.image.startY));var n=t.image.width*t.scale,a=t.image.height*t.scale;if(!(n<t.gesture.slideWidth&&a<t.gesture.slideHeight)){if(t.image.minX=Math.min(t.gesture.slideWidth/2-n/2,0),t.image.maxX=-t.image.minX,t.image.minY=Math.min(t.gesture.slideHeight/2-a/2,0),t.image.maxY=-t.image.minY,t.image.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,t.image.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!t.image.isMoved&&!t.isScaling){if(b.isHorizontal()&&Math.floor(t.image.minX)===Math.floor(t.image.startX)&&t.image.touchesCurrent.x<t.image.touchesStart.x||Math.floor(t.image.maxX)===Math.floor(t.image.startX)&&t.image.touchesCurrent.x>t.image.touchesStart.x)return void(t.image.isTouched=!1);if(!b.isHorizontal()&&Math.floor(t.image.minY)===Math.floor(t.image.startY)&&t.image.touchesCurrent.y<t.image.touchesStart.y||Math.floor(t.image.maxY)===Math.floor(t.image.startY)&&t.image.touchesCurrent.y>t.image.touchesStart.y)return void(t.image.isTouched=!1)}e.preventDefault(),e.stopPropagation(),t.image.isMoved=!0,t.image.currentX=t.image.touchesCurrent.x-t.image.touchesStart.x+t.image.startX,t.image.currentY=t.image.touchesCurrent.y-t.image.touchesStart.y+t.image.startY,t.image.currentX<t.image.minX&&(t.image.currentX=t.image.minX+1-Math.pow(t.image.minX-t.image.currentX+1,.8)),t.image.currentX>t.image.maxX&&(t.image.currentX=t.image.maxX-1+Math.pow(t.image.currentX-t.image.maxX+1,.8)),t.image.currentY<t.image.minY&&(t.image.currentY=t.image.minY+1-Math.pow(t.image.minY-t.image.currentY+1,.8)),t.image.currentY>t.image.maxY&&(t.image.currentY=t.image.maxY-1+Math.pow(t.image.currentY-t.image.maxY+1,.8)),t.velocity.prevPositionX||(t.velocity.prevPositionX=t.image.touchesCurrent.x),t.velocity.prevPositionY||(t.velocity.prevPositionY=t.image.touchesCurrent.y),t.velocity.prevTime||(t.velocity.prevTime=Date.now()),t.velocity.x=(t.image.touchesCurrent.x-t.velocity.prevPositionX)/(Date.now()-t.velocity.prevTime)/2,t.velocity.y=(t.image.touchesCurrent.y-t.velocity.prevPositionY)/(Date.now()-t.velocity.prevTime)/2,Math.abs(t.image.touchesCurrent.x-t.velocity.prevPositionX)<2&&(t.velocity.x=0),Math.abs(t.image.touchesCurrent.y-t.velocity.prevPositionY)<2&&(t.velocity.y=0),t.velocity.prevPositionX=t.image.touchesCurrent.x,t.velocity.prevPositionY=t.image.touchesCurrent.y,t.velocity.prevTime=Date.now(),t.gesture.imageWrap.transform("translate3d("+t.image.currentX+"px, "+t.image.currentY+"px,0)")}}},onTouchEnd:function(e,t){var n=e.zoom;if(n.gesture.image&&0!==n.gesture.image.length){if(!n.image.isTouched||!n.image.isMoved)return n.image.isTouched=!1,void(n.image.isMoved=!1);n.image.isTouched=!1,n.image.isMoved=!1;var a=300,r=300,i=n.velocity.x*a,s=n.image.currentX+i,o=n.velocity.y*r,l=n.image.currentY+o;0!==n.velocity.x&&(a=Math.abs((s-n.image.currentX)/n.velocity.x)),0!==n.velocity.y&&(r=Math.abs((l-n.image.currentY)/n.velocity.y));var u=Math.max(a,r);n.image.currentX=s,n.image.currentY=l;var p=n.image.width*n.scale,d=n.image.height*n.scale;n.image.minX=Math.min(n.gesture.slideWidth/2-p/2,0),n.image.maxX=-n.image.minX,n.image.minY=Math.min(n.gesture.slideHeight/2-d/2,0),n.image.maxY=-n.image.minY,n.image.currentX=Math.max(Math.min(n.image.currentX,n.image.maxX),n.image.minX),n.image.currentY=Math.max(Math.min(n.image.currentY,n.image.maxY),n.image.minY),n.gesture.imageWrap.transition(u).transform("translate3d("+n.image.currentX+"px, "+n.image.currentY+"px,0)")}},onTransitionEnd:function(e){var t=e.zoom;t.gesture.slide&&e.previousIndex!==e.activeIndex&&(t.gesture.image.transform("translate3d(0,0,0) scale(1)"),t.gesture.imageWrap.transform("translate3d(0,0,0)"),t.gesture.slide=t.gesture.image=t.gesture.imageWrap=void 0,t.scale=t.currentScale=1)},toggleZoom:function(t,n){var a=t.zoom;if(a.gesture.slide||(a.gesture.slide=t.clickedSlide?e(t.clickedSlide):t.slides.eq(t.activeIndex),a.gesture.image=a.gesture.slide.find("img, svg, canvas"),a.gesture.imageWrap=a.gesture.image.parent("."+t.params.zoomContainerClass)),a.gesture.image&&0!==a.gesture.image.length){var r,i,s,o,l,u,p,d,c,f,h,m,g,v,y,w;void 0===a.image.touchesStart.x&&n?(r="touchend"===n.type?n.changedTouches[0].pageX:n.pageX,i="touchend"===n.type?n.changedTouches[0].pageY:n.pageY):(r=a.image.touchesStart.x,i=a.image.touchesStart.y),a.scale&&1!==a.scale?(a.scale=a.currentScale=1,a.gesture.imageWrap.transition(300).transform("translate3d(0,0,0)"),a.gesture.image.transition(300).transform("translate3d(0,0,0) scale(1)"),a.gesture.slide=void 0):(a.scale=a.currentScale=a.gesture.imageWrap.attr("data-swiper-zoom")||t.params.zoomMax,n?(y=a.gesture.slide[0].offsetWidth,w=a.gesture.slide[0].offsetHeight,s=a.gesture.slide.offset().left+y/2-r,o=a.gesture.slide.offset().top+w/2-i,p=a.gesture.image[0].offsetWidth,d=a.gesture.image[0].offsetHeight,c=p*a.scale,f=d*a.scale,g=-(h=Math.min(y/2-c/2,0)),v=-(m=Math.min(w/2-f/2,0)),l=s*a.scale,u=o*a.scale,l<h&&(l=h),l>g&&(l=g),u<m&&(u=m),u>v&&(u=v)):(l=0,u=0),a.gesture.imageWrap.transition(300).transform("translate3d("+l+"px, "+u+"px,0)"),a.gesture.image.transition(300).transform("translate3d(0,0,0) scale("+a.scale+")"))}},attachEvents:function(t){var n=t?"off":"on";if(b.params.zoom){b.slides;var a=!("touchstart"!==b.touchEvents.start||!b.support.passiveListener||!b.params.passiveListeners)&&{passive:!0,capture:!1};b.support.gestures?(b.slides[n]("gesturestart",b.zoom.onGestureStart,a),b.slides[n]("gesturechange",b.zoom.onGestureChange,a),b.slides[n]("gestureend",b.zoom.onGestureEnd,a)):"touchstart"===b.touchEvents.start&&(b.slides[n](b.touchEvents.start,b.zoom.onGestureStart,a),b.slides[n](b.touchEvents.move,b.zoom.onGestureChange,a),b.slides[n](b.touchEvents.end,b.zoom.onGestureEnd,a)),b[n]("touchStart",b.zoom.onTouchStart),b.slides.each(function(t,a){e(a).find("."+b.params.zoomContainerClass).length>0&&e(a)[n](b.touchEvents.move,b.zoom.onTouchMove)}),b[n]("touchEnd",b.zoom.onTouchEnd),b[n]("transitionEnd",b.zoom.onTransitionEnd),b.params.zoomToggle&&b.on("doubleTap",b.zoom.toggleZoom)}},init:function(){b.zoom.attachEvents()},destroy:function(){b.zoom.attachEvents(!0)}},b._plugins=[];for(var j in b.plugins){var q=b.plugins[j](b,b.params[j]);q&&b._plugins.push(q)}return b.callPlugins=function(e){for(var t=0;t<b._plugins.length;t++)e in b._plugins[t]&&b._plugins[t][e](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5])},b.emitterEventListeners={},b.emit=function(e){b.params[e]&&b.params[e](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);var t;if(b.emitterEventListeners[e])for(t=0;t<b.emitterEventListeners[e].length;t++)b.emitterEventListeners[e][t](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);b.callPlugins&&b.callPlugins(e,arguments[1],arguments[2],arguments[3],arguments[4],arguments[5])},b.on=function(e,t){return e=f(e),b.emitterEventListeners[e]||(b.emitterEventListeners[e]=[]),b.emitterEventListeners[e].push(t),b},b.off=function(e,t){var n;if(e=f(e),void 0===t)return b.emitterEventListeners[e]=[],b;if(b.emitterEventListeners[e]&&0!==b.emitterEventListeners[e].length){for(n=0;n<b.emitterEventListeners[e].length;n++)b.emitterEventListeners[e][n]===t&&b.emitterEventListeners[e].splice(n,1);return b}},b.once=function(e,t){e=f(e);var n=function(){t(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]),b.off(e,n)};return b.on(e,n),b},b.a11y={makeFocusable:function(e){return e.attr("tabIndex","0"),e},addRole:function(e,t){return e.attr("role",t),e},addLabel:function(e,t){return e.attr("aria-label",t),e},disable:function(e){return e.attr("aria-disabled",!0),e},enable:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(t){13===t.keyCode&&(e(t.target).is(b.params.nextButton)?(b.onClickNext(t),b.isEnd?b.a11y.notify(b.params.lastSlideMessage):b.a11y.notify(b.params.nextSlideMessage)):e(t.target).is(b.params.prevButton)&&(b.onClickPrev(t),b.isBeginning?b.a11y.notify(b.params.firstSlideMessage):b.a11y.notify(b.params.prevSlideMessage)),e(t.target).is("."+b.params.bulletClass)&&e(t.target)[0].click())},liveRegion:e('<span class="'+b.params.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>'),notify:function(e){var t=b.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},init:function(){b.params.nextButton&&b.nextButton&&b.nextButton.length>0&&(b.a11y.makeFocusable(b.nextButton),b.a11y.addRole(b.nextButton,"button"),b.a11y.addLabel(b.nextButton,b.params.nextSlideMessage)),b.params.prevButton&&b.prevButton&&b.prevButton.length>0&&(b.a11y.makeFocusable(b.prevButton),b.a11y.addRole(b.prevButton,"button"),b.a11y.addLabel(b.prevButton,b.params.prevSlideMessage)),e(b.container).append(b.a11y.liveRegion)},initPagination:function(){b.params.pagination&&b.params.paginationClickable&&b.bullets&&b.bullets.length&&b.bullets.each(function(){var t=e(this);b.a11y.makeFocusable(t),b.a11y.addRole(t,"button"),b.a11y.addLabel(t,b.params.paginationBulletMessage.replace(/{{index}}/,t.index()+1))})},destroy:function(){b.a11y.liveRegion&&b.a11y.liveRegion.length>0&&b.a11y.liveRegion.remove()}},b.init=function(){b.params.loop&&b.createLoop(),b.updateContainerSize(),b.updateSlidesSize(),b.updatePagination(),b.params.scrollbar&&b.scrollbar&&(b.scrollbar.set(),b.params.scrollbarDraggable&&b.scrollbar.enableDraggable()),"slide"!==b.params.effect&&b.effects[b.params.effect]&&(b.params.loop||b.updateProgress(),b.effects[b.params.effect].setTranslate()),b.params.loop?b.slideTo(b.params.initialSlide+b.loopedSlides,0,b.params.runCallbacksOnInit):(b.slideTo(b.params.initialSlide,0,b.params.runCallbacksOnInit),0===b.params.initialSlide&&(b.parallax&&b.params.parallax&&b.parallax.setTranslate(),b.lazy&&b.params.lazyLoading&&(b.lazy.load(),b.lazy.initialImageLoaded=!0))),b.attachEvents(),b.params.observer&&b.support.observer&&b.initObservers(),b.params.preloadImages&&!b.params.lazyLoading&&b.preloadImages(),b.params.zoom&&b.zoom&&b.zoom.init(),b.params.autoplay&&b.startAutoplay(),b.params.keyboardControl&&b.enableKeyboardControl&&b.enableKeyboardControl(),b.params.mousewheelControl&&b.enableMousewheelControl&&b.enableMousewheelControl(),b.params.hashnavReplaceState&&(b.params.replaceState=b.params.hashnavReplaceState),b.params.history&&b.history&&b.history.init(),b.params.hashnav&&b.hashnav&&b.hashnav.init(),b.params.a11y&&b.a11y&&b.a11y.init(),b.emit("onInit",b)},b.cleanupStyles=function(){b.container.removeClass(b.classNames.join(" ")).removeAttr("style"),b.wrapper.removeAttr("style"),b.slides&&b.slides.length&&b.slides.removeClass([b.params.slideVisibleClass,b.params.slideActiveClass,b.params.slideNextClass,b.params.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-column").removeAttr("data-swiper-row"),b.paginationContainer&&b.paginationContainer.length&&b.paginationContainer.removeClass(b.params.paginationHiddenClass),b.bullets&&b.bullets.length&&b.bullets.removeClass(b.params.bulletActiveClass),b.params.prevButton&&e(b.params.prevButton).removeClass(b.params.buttonDisabledClass),b.params.nextButton&&e(b.params.nextButton).removeClass(b.params.buttonDisabledClass),b.params.scrollbar&&b.scrollbar&&(b.scrollbar.track&&b.scrollbar.track.length&&b.scrollbar.track.removeAttr("style"),b.scrollbar.drag&&b.scrollbar.drag.length&&b.scrollbar.drag.removeAttr("style"))},b.destroy=function(e,t){b.detachEvents(),b.stopAutoplay(),b.params.scrollbar&&b.scrollbar&&b.params.scrollbarDraggable&&b.scrollbar.disableDraggable(),b.params.loop&&b.destroyLoop(),t&&b.cleanupStyles(),b.disconnectObservers(),b.params.zoom&&b.zoom&&b.zoom.destroy(),b.params.keyboardControl&&b.disableKeyboardControl&&b.disableKeyboardControl(),b.params.mousewheelControl&&b.disableMousewheelControl&&b.disableMousewheelControl(),b.params.a11y&&b.a11y&&b.a11y.destroy(),b.params.history&&!b.params.replaceState&&window.removeEventListener("popstate",b.history.setHistoryPopState),b.params.hashnav&&b.hashnav&&b.hashnav.destroy(),b.emit("onDestroy"),!1!==e&&(b=null)},b.init(),b}};t.prototype={isSafari:function(){var e=window.navigator.userAgent.toLowerCase();return e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0}(),isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent),isArray:function(e){return"[object Array]"===Object.prototype.toString.apply(e)},browser:{ie:window.navigator.pointerEnabled||window.navigator.msPointerEnabled,ieTouch:window.navigator.msPointerEnabled&&window.navigator.msMaxTouchPoints>1||window.navigator.pointerEnabled&&window.navigator.maxTouchPoints>1,lteIE9:function(){var e=document.createElement("div");return e.innerHTML="\x3c!--[if lte IE 9]><i></i><![endif]--\x3e",1===e.getElementsByTagName("i").length}()},device:function(){var e=window.navigator.userAgent,t=e.match(/(Android);?[\s\/]+([\d.]+)?/),n=e.match(/(iPad).*OS\s([\d_]+)/),a=e.match(/(iPod)(.*OS\s([\d_]+))?/),r=!n&&e.match(/(iPhone\sOS|iOS)\s([\d_]+)/);return{ios:n||r||a,android:t}}(),support:{touch:window.Modernizr&&!0===Modernizr.touch||!!("ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch),transforms3d:window.Modernizr&&!0===Modernizr.csstransforms3d||function(){var e=document.createElement("div").style;return"webkitPerspective"in e||"MozPerspective"in e||"OPerspective"in e||"MsPerspective"in e||"perspective"in e}(),flexbox:function(){for(var e=document.createElement("div").style,t="alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" "),n=0;n<t.length;n++)if(t[n]in e)return!0}(),observer:"MutationObserver"in window||"WebkitMutationObserver"in window,passiveListener:function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in window},plugins:{}};for(var n=(function(){var e=function(e){var t=this,n=0;for(n=0;n<e.length;n++)t[n]=e[n];return t.length=e.length,this},t=function(t,n){var a=[],r=0;if(t&&!n&&t instanceof e)return t;if(t)if("string"==typeof t){var i,s,o=t.trim();if(o.indexOf("<")>=0&&o.indexOf(">")>=0){var l="div";for(0===o.indexOf("<li")&&(l="ul"),0===o.indexOf("<tr")&&(l="tbody"),0!==o.indexOf("<td")&&0!==o.indexOf("<th")||(l="tr"),0===o.indexOf("<tbody")&&(l="table"),0===o.indexOf("<option")&&(l="select"),(s=document.createElement(l)).innerHTML=t,r=0;r<s.childNodes.length;r++)a.push(s.childNodes[r])}else for(i=n||"#"!==t[0]||t.match(/[ .<>:~]/)?(n||document).querySelectorAll(t):[document.getElementById(t.split("#")[1])],r=0;r<i.length;r++)i[r]&&a.push(i[r])}else if(t.nodeType||t===window||t===document)a.push(t);else if(t.length>0&&t[0].nodeType)for(r=0;r<t.length;r++)a.push(t[r]);return new e(a)};return e.prototype={addClass:function(e){if(void 0===e)return this;for(var t=e.split(" "),n=0;n<t.length;n++)for(var a=0;a<this.length;a++)this[a].classList.add(t[n]);return this},removeClass:function(e){for(var t=e.split(" "),n=0;n<t.length;n++)for(var a=0;a<this.length;a++)this[a].classList.remove(t[n]);return this},hasClass:function(e){return!!this[0]&&this[0].classList.contains(e)},toggleClass:function(e){for(var t=e.split(" "),n=0;n<t.length;n++)for(var a=0;a<this.length;a++)this[a].classList.toggle(t[n]);return this},attr:function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var n=0;n<this.length;n++)if(2===arguments.length)this[n].setAttribute(e,t);else for(var a in e)this[n][a]=e[a],this[n].setAttribute(a,e[a]);return this},removeAttr:function(e){for(var t=0;t<this.length;t++)this[t].removeAttribute(e);return this},data:function(e,t){if(void 0!==t){for(var n=0;n<this.length;n++){var a=this[n];a.dom7ElementDataStorage||(a.dom7ElementDataStorage={}),a.dom7ElementDataStorage[e]=t}return this}if(this[0]){var r=this[0].getAttribute("data-"+e);return r||(this[0].dom7ElementDataStorage&&e in this[0].dom7ElementDataStorage?this[0].dom7ElementDataStorage[e]:void 0)}},transform:function(e){for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransform=n.MsTransform=n.msTransform=n.MozTransform=n.OTransform=n.transform=e}return this},transition:function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransitionDuration=n.MsTransitionDuration=n.msTransitionDuration=n.MozTransitionDuration=n.OTransitionDuration=n.transitionDuration=e}return this},on:function(e,n,a,r){function i(e){var r=e.target;if(t(r).is(n))a.call(r,e);else for(var i=t(r).parents(),s=0;s<i.length;s++)t(i[s]).is(n)&&a.call(i[s],e)}var s,o,l=e.split(" ");for(s=0;s<this.length;s++)if("function"==typeof n||!1===n)for("function"==typeof n&&(a=arguments[1],r=arguments[2]||!1),o=0;o<l.length;o++)this[s].addEventListener(l[o],a,r);else for(o=0;o<l.length;o++)this[s].dom7LiveListeners||(this[s].dom7LiveListeners=[]),this[s].dom7LiveListeners.push({listener:a,liveListener:i}),this[s].addEventListener(l[o],i,r);return this},off:function(e,t,n,a){for(var r=e.split(" "),i=0;i<r.length;i++)for(var s=0;s<this.length;s++)if("function"==typeof t||!1===t)"function"==typeof t&&(n=arguments[1],a=arguments[2]||!1),this[s].removeEventListener(r[i],n,a);else if(this[s].dom7LiveListeners)for(var o=0;o<this[s].dom7LiveListeners.length;o++)this[s].dom7LiveListeners[o].listener===n&&this[s].removeEventListener(r[i],this[s].dom7LiveListeners[o].liveListener,a);return this},once:function(e,t,n,a){function r(s){n(s),i.off(e,t,r,a)}var i=this;"function"==typeof t&&(t=!1,n=arguments[1],a=arguments[2]),i.on(e,t,r,a)},trigger:function(e,t){for(var n=0;n<this.length;n++){var a;try{a=new window.CustomEvent(e,{detail:t,bubbles:!0,cancelable:!0})}catch(n){(a=document.createEvent("Event")).initEvent(e,!0,!0),a.detail=t}this[n].dispatchEvent(a)}return this},transitionEnd:function(e){function t(i){if(i.target===this)for(e.call(this,i),n=0;n<a.length;n++)r.off(a[n],t)}var n,a=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],r=this;if(e)for(n=0;n<a.length;n++)r.on(a[n],t);return this},width:function(){return this[0]===window?window.innerWidth:this.length>0?parseFloat(this.css("width")):null},outerWidth:function(e){return this.length>0?e?this[0].offsetWidth+parseFloat(this.css("margin-right"))+parseFloat(this.css("margin-left")):this[0].offsetWidth:null},height:function(){return this[0]===window?window.innerHeight:this.length>0?parseFloat(this.css("height")):null},outerHeight:function(e){return this.length>0?e?this[0].offsetHeight+parseFloat(this.css("margin-top"))+parseFloat(this.css("margin-bottom")):this[0].offsetHeight:null},offset:function(){if(this.length>0){var e=this[0],t=e.getBoundingClientRect(),n=document.body,a=e.clientTop||n.clientTop||0,r=e.clientLeft||n.clientLeft||0,i=window.pageYOffset||e.scrollTop,s=window.pageXOffset||e.scrollLeft;return{top:t.top+i-a,left:t.left+s-r}}return null},css:function(e,t){var n;if(1===arguments.length){if("string"!=typeof e){for(n=0;n<this.length;n++)for(var a in e)this[n].style[a]=e[a];return this}if(this[0])return window.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(n=0;n<this.length;n++)this[n].style[e]=t;return this}return this},each:function(e){for(var t=0;t<this.length;t++)e.call(this[t],t,this[t]);return this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:void 0;for(var t=0;t<this.length;t++)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t++)this[t].textContent=e;return this},is:function(n){if(!this[0])return!1;var a,r;if("string"==typeof n){var i=this[0];if(i===document)return n===document;if(i===window)return n===window;if(i.matches)return i.matches(n);if(i.webkitMatchesSelector)return i.webkitMatchesSelector(n);if(i.mozMatchesSelector)return i.mozMatchesSelector(n);if(i.msMatchesSelector)return i.msMatchesSelector(n);for(a=t(n),r=0;r<a.length;r++)if(a[r]===this[0])return!0;return!1}if(n===document)return this[0]===document;if(n===window)return this[0]===window;if(n.nodeType||n instanceof e){for(a=n.nodeType?[n]:n,r=0;r<a.length;r++)if(a[r]===this[0])return!0;return!1}return!1},index:function(){if(this[0]){for(var e=this[0],t=0;null!==(e=e.previousSibling);)1===e.nodeType&&t++;return t}},eq:function(t){if(void 0===t)return this;var n,a=this.length;return t>a-1?new e([]):t<0?(n=a+t,new e(n<0?[]:[this[n]])):new e([this[t]])},append:function(t){var n,a;for(n=0;n<this.length;n++)if("string"==typeof t){var r=document.createElement("div");for(r.innerHTML=t;r.firstChild;)this[n].appendChild(r.firstChild)}else if(t instanceof e)for(a=0;a<t.length;a++)this[n].appendChild(t[a]);else this[n].appendChild(t);return this},prepend:function(t){var n,a;for(n=0;n<this.length;n++)if("string"==typeof t){var r=document.createElement("div");for(r.innerHTML=t,a=r.childNodes.length-1;a>=0;a--)this[n].insertBefore(r.childNodes[a],this[n].childNodes[0])}else if(t instanceof e)for(a=0;a<t.length;a++)this[n].insertBefore(t[a],this[n].childNodes[0]);else this[n].insertBefore(t,this[n].childNodes[0]);return this},insertBefore:function(e){for(var n=t(e),a=0;a<this.length;a++)if(1===n.length)n[0].parentNode.insertBefore(this[a],n[0]);else if(n.length>1)for(var r=0;r<n.length;r++)n[r].parentNode.insertBefore(this[a].cloneNode(!0),n[r])},insertAfter:function(e){for(var n=t(e),a=0;a<this.length;a++)if(1===n.length)n[0].parentNode.insertBefore(this[a],n[0].nextSibling);else if(n.length>1)for(var r=0;r<n.length;r++)n[r].parentNode.insertBefore(this[a].cloneNode(!0),n[r].nextSibling)},next:function(n){return new e(this.length>0?n?this[0].nextElementSibling&&t(this[0].nextElementSibling).is(n)?[this[0].nextElementSibling]:[]:this[0].nextElementSibling?[this[0].nextElementSibling]:[]:[])},nextAll:function(n){var a=[],r=this[0];if(!r)return new e([]);for(;r.nextElementSibling;){var i=r.nextElementSibling;n?t(i).is(n)&&a.push(i):a.push(i),r=i}return new e(a)},prev:function(n){return new e(this.length>0?n?this[0].previousElementSibling&&t(this[0].previousElementSibling).is(n)?[this[0].previousElementSibling]:[]:this[0].previousElementSibling?[this[0].previousElementSibling]:[]:[])},prevAll:function(n){var a=[],r=this[0];if(!r)return new e([]);for(;r.previousElementSibling;){var i=r.previousElementSibling;n?t(i).is(n)&&a.push(i):a.push(i),r=i}return new e(a)},parent:function(e){for(var n=[],a=0;a<this.length;a++)e?t(this[a].parentNode).is(e)&&n.push(this[a].parentNode):n.push(this[a].parentNode);return t(t.unique(n))},parents:function(e){for(var n=[],a=0;a<this.length;a++)for(var r=this[a].parentNode;r;)e?t(r).is(e)&&n.push(r):n.push(r),r=r.parentNode;return t(t.unique(n))},find:function(t){for(var n=[],a=0;a<this.length;a++)for(var r=this[a].querySelectorAll(t),i=0;i<r.length;i++)n.push(r[i]);return new e(n)},children:function(n){for(var a=[],r=0;r<this.length;r++)for(var i=this[r].childNodes,s=0;s<i.length;s++)n?1===i[s].nodeType&&t(i[s]).is(n)&&a.push(i[s]):1===i[s].nodeType&&a.push(i[s]);return new e(t.unique(a))},remove:function(){for(var e=0;e<this.length;e++)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},add:function(){var e,n,a=this;for(e=0;e<arguments.length;e++){var r=t(arguments[e]);for(n=0;n<r.length;n++)a[a.length]=r[n],a.length++}return a}},t.fn=e.prototype,t.unique=function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t},t}()),a=["jQuery","Zepto","Dom7"],r=0;r<a.length;r++)window[a[r]]&&function(e){e.fn.swiper=function(n){var a;return e(this).each(function(){var e=new t(this,n);a||(a=e)}),a}}(window[a[r]]);var i;(i=void 0===n?window.Dom7||window.Zepto||window.jQuery:n)&&("transitionEnd"in i.fn||(i.fn.transitionEnd=function(e){function t(i){if(i.target===this)for(e.call(this,i),n=0;n<a.length;n++)r.off(a[n],t)}var n,a=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],r=this;if(e)for(n=0;n<a.length;n++)r.on(a[n],t);return this}),"transform"in i.fn||(i.fn.transform=function(e){for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransform=n.MsTransform=n.msTransform=n.MozTransform=n.OTransform=n.transform=e}return this}),"transition"in i.fn||(i.fn.transition=function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransitionDuration=n.MsTransitionDuration=n.msTransitionDuration=n.MozTransitionDuration=n.OTransitionDuration=n.transitionDuration=e}return this}),"outerWidth"in i.fn||(i.fn.outerWidth=function(e){return this.length>0?e?this[0].offsetWidth+parseFloat(this.css("margin-right"))+parseFloat(this.css("margin-left")):this[0].offsetWidth:null})),window.Swiper=t}(),"undefined"!=typeof module?module.exports=window.Swiper:"function"==typeof define&&define.amd&&define([],function(){return window.Swiper}),$(document).ready(function(){$(".request-form__item[name=Name]").on("change invalid",function(){var e=$(this).get(0);e.setCustomValidity(""),e.validity.valid||e.setCustomValidity("Введіть дані у зазначеному форматі.\nПриклад: Ігор")}),$(".request-form__item[name=E-mail]").on("change invalid",function(){var e=$(this).get(0);e.setCustomValidity(""),e.validity.valid||e.setCustomValidity("Введіть дані у зазначеному форматі.\nПриклад: «nick@mail.com»")}),$(".request-form__item[name=Phone]").on("change invalid",function(){var e=$(this).get(0);e.setCustomValidity(""),e.validity.valid||e.setCustomValidity("Введіть дані у зазначеному форматі.\nПриклад: «+38(044)555-55-55»")}),$(document).scroll(function(){$(this).scrollTop()>200?$(".anchor").addClass("visible"):$(".anchor").removeClass("visible")}),$(".header__logo").click(function(){return $("body,html").animate({scrollTop:0},1e3),!1}),$(".anchor").click(function(){return $("body,html").animate({scrollTop:0},1e3),!1}),$(".header__menu").on("click","a",function(e){e.preventDefault();var t=$(this).attr("href"),n=$(".header").outerHeight(),a=$(t).offset().top-n;$("body,html").animate({scrollTop:a},1800)}),$(document).on("scroll",function(){$(".menu__link").each(function(){var e=$(this).attr("href");$(document).scrollTop()>=$(e).offset().top-$(".header").outerHeight()?($(".menu__link").removeClass("current"),$(this).filter('[href="'+e+'"]').addClass("current")):$(window).scrollTop()+$(window).outerHeight()>=$(".footer").offset().top&&($(".menu__link").removeClass("current"),$(this).filter('[href="'+e+'"]').addClass("current"))})}),new Swiper(".order-section__swiper",{nextButton:".swiper-button-next",prevButton:".swiper-button-prev",pagination:".swiper-pagination",loop:!0,speed:600,autoplay:8e3,spaceBetween:20})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
